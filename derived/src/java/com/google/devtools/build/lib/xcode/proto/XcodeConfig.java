// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/xcode_config.proto

package com.google.devtools.build.lib.xcode.proto;

public final class XcodeConfig {
  private XcodeConfig() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface XcodeVersionInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:xcode_config.XcodeVersionInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The canonical version number for this Xcode.
     * </pre>
     *
     * <code>string version = 1;</code>
     * @return The version.
     */
    java.lang.String getVersion();
    /**
     * <pre>
     * The canonical version number for this Xcode.
     * </pre>
     *
     * <code>string version = 1;</code>
     * @return The bytes for version.
     */
    com.google.protobuf.ByteString
        getVersionBytes();

    /**
     * <pre>
     * The aliases for this version, if present.
     * </pre>
     *
     * <code>repeated string aliases = 2;</code>
     * @return A list containing the aliases.
     */
    java.util.List<java.lang.String>
        getAliasesList();
    /**
     * <pre>
     * The aliases for this version, if present.
     * </pre>
     *
     * <code>repeated string aliases = 2;</code>
     * @return The count of aliases.
     */
    int getAliasesCount();
    /**
     * <pre>
     * The aliases for this version, if present.
     * </pre>
     *
     * <code>repeated string aliases = 2;</code>
     * @param index The index of the element to return.
     * @return The aliases at the given index.
     */
    java.lang.String getAliases(int index);
    /**
     * <pre>
     * The aliases for this version, if present.
     * </pre>
     *
     * <code>repeated string aliases = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the aliases at the given index.
     */
    com.google.protobuf.ByteString
        getAliasesBytes(int index);
  }
  /**
   * <pre>
   * Information about a single Xcode version.
   * </pre>
   *
   * Protobuf type {@code xcode_config.XcodeVersionInfo}
   */
  public static final class XcodeVersionInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:xcode_config.XcodeVersionInfo)
      XcodeVersionInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XcodeVersionInfo.newBuilder() to construct.
    private XcodeVersionInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XcodeVersionInfo() {
      version_ = "";
      aliases_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XcodeVersionInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private XcodeVersionInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              version_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                aliases_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              aliases_.add(s);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          aliases_ = aliases_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeVersionInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeVersionInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.class, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder.class);
    }

    public static final int VERSION_FIELD_NUMBER = 1;
    private volatile java.lang.Object version_;
    /**
     * <pre>
     * The canonical version number for this Xcode.
     * </pre>
     *
     * <code>string version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The canonical version number for this Xcode.
     * </pre>
     *
     * <code>string version = 1;</code>
     * @return The bytes for version.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ALIASES_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList aliases_;
    /**
     * <pre>
     * The aliases for this version, if present.
     * </pre>
     *
     * <code>repeated string aliases = 2;</code>
     * @return A list containing the aliases.
     */
    public com.google.protobuf.ProtocolStringList
        getAliasesList() {
      return aliases_;
    }
    /**
     * <pre>
     * The aliases for this version, if present.
     * </pre>
     *
     * <code>repeated string aliases = 2;</code>
     * @return The count of aliases.
     */
    public int getAliasesCount() {
      return aliases_.size();
    }
    /**
     * <pre>
     * The aliases for this version, if present.
     * </pre>
     *
     * <code>repeated string aliases = 2;</code>
     * @param index The index of the element to return.
     * @return The aliases at the given index.
     */
    public java.lang.String getAliases(int index) {
      return aliases_.get(index);
    }
    /**
     * <pre>
     * The aliases for this version, if present.
     * </pre>
     *
     * <code>repeated string aliases = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the aliases at the given index.
     */
    public com.google.protobuf.ByteString
        getAliasesBytes(int index) {
      return aliases_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getVersionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, version_);
      }
      for (int i = 0; i < aliases_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, aliases_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getVersionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, version_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < aliases_.size(); i++) {
          dataSize += computeStringSizeNoTag(aliases_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getAliasesList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo)) {
        return super.equals(obj);
      }
      com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo other = (com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo) obj;

      if (!getVersion()
          .equals(other.getVersion())) return false;
      if (!getAliasesList()
          .equals(other.getAliasesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion().hashCode();
      if (getAliasesCount() > 0) {
        hash = (37 * hash) + ALIASES_FIELD_NUMBER;
        hash = (53 * hash) + getAliasesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Information about a single Xcode version.
     * </pre>
     *
     * Protobuf type {@code xcode_config.XcodeVersionInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:xcode_config.XcodeVersionInfo)
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeVersionInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeVersionInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.class, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder.class);
      }

      // Construct using com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        version_ = "";

        aliases_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeVersionInfo_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getDefaultInstanceForType() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo build() {
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo buildPartial() {
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo result = new com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo(this);
        int from_bitField0_ = bitField0_;
        result.version_ = version_;
        if (((bitField0_ & 0x00000001) != 0)) {
          aliases_ = aliases_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.aliases_ = aliases_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo) {
          return mergeFrom((com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo other) {
        if (other == com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance()) return this;
        if (!other.getVersion().isEmpty()) {
          version_ = other.version_;
          onChanged();
        }
        if (!other.aliases_.isEmpty()) {
          if (aliases_.isEmpty()) {
            aliases_ = other.aliases_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAliasesIsMutable();
            aliases_.addAll(other.aliases_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object version_ = "";
      /**
       * <pre>
       * The canonical version number for this Xcode.
       * </pre>
       *
       * <code>string version = 1;</code>
       * @return The version.
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The canonical version number for this Xcode.
       * </pre>
       *
       * <code>string version = 1;</code>
       * @return The bytes for version.
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The canonical version number for this Xcode.
       * </pre>
       *
       * <code>string version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The canonical version number for this Xcode.
       * </pre>
       *
       * <code>string version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        
        version_ = getDefaultInstance().getVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The canonical version number for this Xcode.
       * </pre>
       *
       * <code>string version = 1;</code>
       * @param value The bytes for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        version_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList aliases_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureAliasesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          aliases_ = new com.google.protobuf.LazyStringArrayList(aliases_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @return A list containing the aliases.
       */
      public com.google.protobuf.ProtocolStringList
          getAliasesList() {
        return aliases_.getUnmodifiableView();
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @return The count of aliases.
       */
      public int getAliasesCount() {
        return aliases_.size();
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @param index The index of the element to return.
       * @return The aliases at the given index.
       */
      public java.lang.String getAliases(int index) {
        return aliases_.get(index);
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the aliases at the given index.
       */
      public com.google.protobuf.ByteString
          getAliasesBytes(int index) {
        return aliases_.getByteString(index);
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @param index The index to set the value at.
       * @param value The aliases to set.
       * @return This builder for chaining.
       */
      public Builder setAliases(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAliasesIsMutable();
        aliases_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @param value The aliases to add.
       * @return This builder for chaining.
       */
      public Builder addAliases(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAliasesIsMutable();
        aliases_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @param values The aliases to add.
       * @return This builder for chaining.
       */
      public Builder addAllAliases(
          java.lang.Iterable<java.lang.String> values) {
        ensureAliasesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aliases_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAliases() {
        aliases_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The aliases for this version, if present.
       * </pre>
       *
       * <code>repeated string aliases = 2;</code>
       * @param value The bytes of the aliases to add.
       * @return This builder for chaining.
       */
      public Builder addAliasesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureAliasesIsMutable();
        aliases_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:xcode_config.XcodeVersionInfo)
    }

    // @@protoc_insertion_point(class_scope:xcode_config.XcodeVersionInfo)
    private static final com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo();
    }

    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XcodeVersionInfo>
        PARSER = new com.google.protobuf.AbstractParser<XcodeVersionInfo>() {
      @java.lang.Override
      public XcodeVersionInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new XcodeVersionInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<XcodeVersionInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XcodeVersionInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XcodeConfigRuleInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:xcode_config.XcodeConfigRuleInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The Xcode version selected from this configuration to be used in the build.
     * </pre>
     *
     * <code>string selected_version = 1;</code>
     * @return The selectedVersion.
     */
    java.lang.String getSelectedVersion();
    /**
     * <pre>
     * The Xcode version selected from this configuration to be used in the build.
     * </pre>
     *
     * <code>string selected_version = 1;</code>
     * @return The bytes for selectedVersion.
     */
    com.google.protobuf.ByteString
        getSelectedVersionBytes();

    /**
     * <pre>
     * The availability of the selected Xcode version.
     * </pre>
     *
     * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
     * @return The enum numeric value on the wire for selectedVersionAvailability.
     */
    int getSelectedVersionAvailabilityValue();
    /**
     * <pre>
     * The availability of the selected Xcode version.
     * </pre>
     *
     * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
     * @return The selectedVersionAvailability.
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability getSelectedVersionAvailability();

    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> 
        getExplicitVersionsList();
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getExplicitVersions(int index);
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    int getExplicitVersionsCount();
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
        getExplicitVersionsOrBuilderList();
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getExplicitVersionsOrBuilder(
        int index);

    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> 
        getRemoteVersionsList();
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getRemoteVersions(int index);
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    int getRemoteVersionsCount();
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
        getRemoteVersionsOrBuilderList();
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getRemoteVersionsOrBuilder(
        int index);

    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> 
        getLocalVersionsList();
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getLocalVersions(int index);
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    int getLocalVersionsCount();
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
        getLocalVersionsOrBuilderList();
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getLocalVersionsOrBuilder(
        int index);

    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> 
        getMutualVersionsList();
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getMutualVersions(int index);
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    int getMutualVersionsCount();
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
        getMutualVersionsOrBuilderList();
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getMutualVersionsOrBuilder(
        int index);

    /**
     * <pre>
     * The default version of this Xcode config (explicit or local).
     * </pre>
     *
     * <code>string default_version = 7;</code>
     * @return The defaultVersion.
     */
    java.lang.String getDefaultVersion();
    /**
     * <pre>
     * The default version of this Xcode config (explicit or local).
     * </pre>
     *
     * <code>string default_version = 7;</code>
     * @return The bytes for defaultVersion.
     */
    com.google.protobuf.ByteString
        getDefaultVersionBytes();

    /**
     * <pre>
     * The value of the --xcode_version flag, if set.
     * </pre>
     *
     * <code>string xcode_version_flag = 8;</code>
     * @return The xcodeVersionFlag.
     */
    java.lang.String getXcodeVersionFlag();
    /**
     * <pre>
     * The value of the --xcode_version flag, if set.
     * </pre>
     *
     * <code>string xcode_version_flag = 8;</code>
     * @return The bytes for xcodeVersionFlag.
     */
    com.google.protobuf.ByteString
        getXcodeVersionFlagBytes();
  }
  /**
   * <pre>
   * Information about the Xcode config, its dependencies and the selected Xcode.
   * </pre>
   *
   * Protobuf type {@code xcode_config.XcodeConfigRuleInfo}
   */
  public static final class XcodeConfigRuleInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:xcode_config.XcodeConfigRuleInfo)
      XcodeConfigRuleInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XcodeConfigRuleInfo.newBuilder() to construct.
    private XcodeConfigRuleInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XcodeConfigRuleInfo() {
      selectedVersion_ = "";
      selectedVersionAvailability_ = 0;
      explicitVersions_ = java.util.Collections.emptyList();
      remoteVersions_ = java.util.Collections.emptyList();
      localVersions_ = java.util.Collections.emptyList();
      mutualVersions_ = java.util.Collections.emptyList();
      defaultVersion_ = "";
      xcodeVersionFlag_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XcodeConfigRuleInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private XcodeConfigRuleInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              selectedVersion_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              selectedVersionAvailability_ = rawValue;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                explicitVersions_ = new java.util.ArrayList<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              explicitVersions_.add(
                  input.readMessage(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                remoteVersions_ = new java.util.ArrayList<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              remoteVersions_.add(
                  input.readMessage(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                localVersions_ = new java.util.ArrayList<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo>();
                mutable_bitField0_ |= 0x00000004;
              }
              localVersions_.add(
                  input.readMessage(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.parser(), extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                mutualVersions_ = new java.util.ArrayList<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo>();
                mutable_bitField0_ |= 0x00000008;
              }
              mutualVersions_.add(
                  input.readMessage(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.parser(), extensionRegistry));
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              defaultVersion_ = s;
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();

              xcodeVersionFlag_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          explicitVersions_ = java.util.Collections.unmodifiableList(explicitVersions_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          remoteVersions_ = java.util.Collections.unmodifiableList(remoteVersions_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          localVersions_ = java.util.Collections.unmodifiableList(localVersions_);
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          mutualVersions_ = java.util.Collections.unmodifiableList(mutualVersions_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeConfigRuleInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeConfigRuleInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.class, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Builder.class);
    }

    /**
     * Protobuf enum {@code xcode_config.XcodeConfigRuleInfo.Availability}
     */
    public enum Availability
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <code>LOCAL = 1;</code>
       */
      LOCAL(1),
      /**
       * <code>REMOTE = 2;</code>
       */
      REMOTE(2),
      /**
       * <code>BOTH = 3;</code>
       */
      BOTH(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <code>LOCAL = 1;</code>
       */
      public static final int LOCAL_VALUE = 1;
      /**
       * <code>REMOTE = 2;</code>
       */
      public static final int REMOTE_VALUE = 2;
      /**
       * <code>BOTH = 3;</code>
       */
      public static final int BOTH_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Availability valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Availability forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return LOCAL;
          case 2: return REMOTE;
          case 3: return BOTH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Availability>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Availability> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Availability>() {
              public Availability findValueByNumber(int number) {
                return Availability.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final Availability[] VALUES = values();

      public static Availability valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Availability(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:xcode_config.XcodeConfigRuleInfo.Availability)
    }

    public static final int SELECTED_VERSION_FIELD_NUMBER = 1;
    private volatile java.lang.Object selectedVersion_;
    /**
     * <pre>
     * The Xcode version selected from this configuration to be used in the build.
     * </pre>
     *
     * <code>string selected_version = 1;</code>
     * @return The selectedVersion.
     */
    @java.lang.Override
    public java.lang.String getSelectedVersion() {
      java.lang.Object ref = selectedVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        selectedVersion_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The Xcode version selected from this configuration to be used in the build.
     * </pre>
     *
     * <code>string selected_version = 1;</code>
     * @return The bytes for selectedVersion.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSelectedVersionBytes() {
      java.lang.Object ref = selectedVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        selectedVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SELECTED_VERSION_AVAILABILITY_FIELD_NUMBER = 2;
    private int selectedVersionAvailability_;
    /**
     * <pre>
     * The availability of the selected Xcode version.
     * </pre>
     *
     * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
     * @return The enum numeric value on the wire for selectedVersionAvailability.
     */
    @java.lang.Override public int getSelectedVersionAvailabilityValue() {
      return selectedVersionAvailability_;
    }
    /**
     * <pre>
     * The availability of the selected Xcode version.
     * </pre>
     *
     * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
     * @return The selectedVersionAvailability.
     */
    @java.lang.Override public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability getSelectedVersionAvailability() {
      @SuppressWarnings("deprecation")
      com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability result = com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability.valueOf(selectedVersionAvailability_);
      return result == null ? com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability.UNRECOGNIZED : result;
    }

    public static final int EXPLICIT_VERSIONS_FIELD_NUMBER = 3;
    private java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> explicitVersions_;
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> getExplicitVersionsList() {
      return explicitVersions_;
    }
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
        getExplicitVersionsOrBuilderList() {
      return explicitVersions_;
    }
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    @java.lang.Override
    public int getExplicitVersionsCount() {
      return explicitVersions_.size();
    }
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getExplicitVersions(int index) {
      return explicitVersions_.get(index);
    }
    /**
     * <pre>
     * The explicitly listed (location-agnostic) Xcode versions in this
     * config, if there are any. A config will have either explicit versions or
     * both local and remote versions.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
     */
    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getExplicitVersionsOrBuilder(
        int index) {
      return explicitVersions_.get(index);
    }

    public static final int REMOTE_VERSIONS_FIELD_NUMBER = 4;
    private java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> remoteVersions_;
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> getRemoteVersionsList() {
      return remoteVersions_;
    }
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
        getRemoteVersionsOrBuilderList() {
      return remoteVersions_;
    }
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    @java.lang.Override
    public int getRemoteVersionsCount() {
      return remoteVersions_.size();
    }
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getRemoteVersions(int index) {
      return remoteVersions_.get(index);
    }
    /**
     * <pre>
     * The remote Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
     */
    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getRemoteVersionsOrBuilder(
        int index) {
      return remoteVersions_.get(index);
    }

    public static final int LOCAL_VERSIONS_FIELD_NUMBER = 5;
    private java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> localVersions_;
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> getLocalVersionsList() {
      return localVersions_;
    }
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
        getLocalVersionsOrBuilderList() {
      return localVersions_;
    }
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    @java.lang.Override
    public int getLocalVersionsCount() {
      return localVersions_.size();
    }
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getLocalVersions(int index) {
      return localVersions_.get(index);
    }
    /**
     * <pre>
     * The local Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
     */
    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getLocalVersionsOrBuilder(
        int index) {
      return localVersions_.get(index);
    }

    public static final int MUTUAL_VERSIONS_FIELD_NUMBER = 6;
    private java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> mutualVersions_;
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> getMutualVersionsList() {
      return mutualVersions_;
    }
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
        getMutualVersionsOrBuilderList() {
      return mutualVersions_;
    }
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    @java.lang.Override
    public int getMutualVersionsCount() {
      return mutualVersions_.size();
    }
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getMutualVersions(int index) {
      return mutualVersions_.get(index);
    }
    /**
     * <pre>
     * The mutually available Xcode versions in this config, if there are any.
     * </pre>
     *
     * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
     */
    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getMutualVersionsOrBuilder(
        int index) {
      return mutualVersions_.get(index);
    }

    public static final int DEFAULT_VERSION_FIELD_NUMBER = 7;
    private volatile java.lang.Object defaultVersion_;
    /**
     * <pre>
     * The default version of this Xcode config (explicit or local).
     * </pre>
     *
     * <code>string default_version = 7;</code>
     * @return The defaultVersion.
     */
    @java.lang.Override
    public java.lang.String getDefaultVersion() {
      java.lang.Object ref = defaultVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        defaultVersion_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The default version of this Xcode config (explicit or local).
     * </pre>
     *
     * <code>string default_version = 7;</code>
     * @return The bytes for defaultVersion.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDefaultVersionBytes() {
      java.lang.Object ref = defaultVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        defaultVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int XCODE_VERSION_FLAG_FIELD_NUMBER = 8;
    private volatile java.lang.Object xcodeVersionFlag_;
    /**
     * <pre>
     * The value of the --xcode_version flag, if set.
     * </pre>
     *
     * <code>string xcode_version_flag = 8;</code>
     * @return The xcodeVersionFlag.
     */
    @java.lang.Override
    public java.lang.String getXcodeVersionFlag() {
      java.lang.Object ref = xcodeVersionFlag_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        xcodeVersionFlag_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The value of the --xcode_version flag, if set.
     * </pre>
     *
     * <code>string xcode_version_flag = 8;</code>
     * @return The bytes for xcodeVersionFlag.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getXcodeVersionFlagBytes() {
      java.lang.Object ref = xcodeVersionFlag_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        xcodeVersionFlag_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getSelectedVersionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, selectedVersion_);
      }
      if (selectedVersionAvailability_ != com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability.UNKNOWN.getNumber()) {
        output.writeEnum(2, selectedVersionAvailability_);
      }
      for (int i = 0; i < explicitVersions_.size(); i++) {
        output.writeMessage(3, explicitVersions_.get(i));
      }
      for (int i = 0; i < remoteVersions_.size(); i++) {
        output.writeMessage(4, remoteVersions_.get(i));
      }
      for (int i = 0; i < localVersions_.size(); i++) {
        output.writeMessage(5, localVersions_.get(i));
      }
      for (int i = 0; i < mutualVersions_.size(); i++) {
        output.writeMessage(6, mutualVersions_.get(i));
      }
      if (!getDefaultVersionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, defaultVersion_);
      }
      if (!getXcodeVersionFlagBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, xcodeVersionFlag_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSelectedVersionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, selectedVersion_);
      }
      if (selectedVersionAvailability_ != com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability.UNKNOWN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, selectedVersionAvailability_);
      }
      for (int i = 0; i < explicitVersions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, explicitVersions_.get(i));
      }
      for (int i = 0; i < remoteVersions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, remoteVersions_.get(i));
      }
      for (int i = 0; i < localVersions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, localVersions_.get(i));
      }
      for (int i = 0; i < mutualVersions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, mutualVersions_.get(i));
      }
      if (!getDefaultVersionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, defaultVersion_);
      }
      if (!getXcodeVersionFlagBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, xcodeVersionFlag_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo)) {
        return super.equals(obj);
      }
      com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo other = (com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo) obj;

      if (!getSelectedVersion()
          .equals(other.getSelectedVersion())) return false;
      if (selectedVersionAvailability_ != other.selectedVersionAvailability_) return false;
      if (!getExplicitVersionsList()
          .equals(other.getExplicitVersionsList())) return false;
      if (!getRemoteVersionsList()
          .equals(other.getRemoteVersionsList())) return false;
      if (!getLocalVersionsList()
          .equals(other.getLocalVersionsList())) return false;
      if (!getMutualVersionsList()
          .equals(other.getMutualVersionsList())) return false;
      if (!getDefaultVersion()
          .equals(other.getDefaultVersion())) return false;
      if (!getXcodeVersionFlag()
          .equals(other.getXcodeVersionFlag())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SELECTED_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getSelectedVersion().hashCode();
      hash = (37 * hash) + SELECTED_VERSION_AVAILABILITY_FIELD_NUMBER;
      hash = (53 * hash) + selectedVersionAvailability_;
      if (getExplicitVersionsCount() > 0) {
        hash = (37 * hash) + EXPLICIT_VERSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getExplicitVersionsList().hashCode();
      }
      if (getRemoteVersionsCount() > 0) {
        hash = (37 * hash) + REMOTE_VERSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getRemoteVersionsList().hashCode();
      }
      if (getLocalVersionsCount() > 0) {
        hash = (37 * hash) + LOCAL_VERSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getLocalVersionsList().hashCode();
      }
      if (getMutualVersionsCount() > 0) {
        hash = (37 * hash) + MUTUAL_VERSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getMutualVersionsList().hashCode();
      }
      hash = (37 * hash) + DEFAULT_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getDefaultVersion().hashCode();
      hash = (37 * hash) + XCODE_VERSION_FLAG_FIELD_NUMBER;
      hash = (53 * hash) + getXcodeVersionFlag().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Information about the Xcode config, its dependencies and the selected Xcode.
     * </pre>
     *
     * Protobuf type {@code xcode_config.XcodeConfigRuleInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:xcode_config.XcodeConfigRuleInfo)
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeConfigRuleInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeConfigRuleInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.class, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Builder.class);
      }

      // Construct using com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getExplicitVersionsFieldBuilder();
          getRemoteVersionsFieldBuilder();
          getLocalVersionsFieldBuilder();
          getMutualVersionsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        selectedVersion_ = "";

        selectedVersionAvailability_ = 0;

        if (explicitVersionsBuilder_ == null) {
          explicitVersions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          explicitVersionsBuilder_.clear();
        }
        if (remoteVersionsBuilder_ == null) {
          remoteVersions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          remoteVersionsBuilder_.clear();
        }
        if (localVersionsBuilder_ == null) {
          localVersions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          localVersionsBuilder_.clear();
        }
        if (mutualVersionsBuilder_ == null) {
          mutualVersions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          mutualVersionsBuilder_.clear();
        }
        defaultVersion_ = "";

        xcodeVersionFlag_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.internal_static_xcode_config_XcodeConfigRuleInfo_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo getDefaultInstanceForType() {
        return com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo build() {
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo buildPartial() {
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo result = new com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo(this);
        int from_bitField0_ = bitField0_;
        result.selectedVersion_ = selectedVersion_;
        result.selectedVersionAvailability_ = selectedVersionAvailability_;
        if (explicitVersionsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            explicitVersions_ = java.util.Collections.unmodifiableList(explicitVersions_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.explicitVersions_ = explicitVersions_;
        } else {
          result.explicitVersions_ = explicitVersionsBuilder_.build();
        }
        if (remoteVersionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            remoteVersions_ = java.util.Collections.unmodifiableList(remoteVersions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.remoteVersions_ = remoteVersions_;
        } else {
          result.remoteVersions_ = remoteVersionsBuilder_.build();
        }
        if (localVersionsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            localVersions_ = java.util.Collections.unmodifiableList(localVersions_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.localVersions_ = localVersions_;
        } else {
          result.localVersions_ = localVersionsBuilder_.build();
        }
        if (mutualVersionsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            mutualVersions_ = java.util.Collections.unmodifiableList(mutualVersions_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mutualVersions_ = mutualVersions_;
        } else {
          result.mutualVersions_ = mutualVersionsBuilder_.build();
        }
        result.defaultVersion_ = defaultVersion_;
        result.xcodeVersionFlag_ = xcodeVersionFlag_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo) {
          return mergeFrom((com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo other) {
        if (other == com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.getDefaultInstance()) return this;
        if (!other.getSelectedVersion().isEmpty()) {
          selectedVersion_ = other.selectedVersion_;
          onChanged();
        }
        if (other.selectedVersionAvailability_ != 0) {
          setSelectedVersionAvailabilityValue(other.getSelectedVersionAvailabilityValue());
        }
        if (explicitVersionsBuilder_ == null) {
          if (!other.explicitVersions_.isEmpty()) {
            if (explicitVersions_.isEmpty()) {
              explicitVersions_ = other.explicitVersions_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureExplicitVersionsIsMutable();
              explicitVersions_.addAll(other.explicitVersions_);
            }
            onChanged();
          }
        } else {
          if (!other.explicitVersions_.isEmpty()) {
            if (explicitVersionsBuilder_.isEmpty()) {
              explicitVersionsBuilder_.dispose();
              explicitVersionsBuilder_ = null;
              explicitVersions_ = other.explicitVersions_;
              bitField0_ = (bitField0_ & ~0x00000001);
              explicitVersionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExplicitVersionsFieldBuilder() : null;
            } else {
              explicitVersionsBuilder_.addAllMessages(other.explicitVersions_);
            }
          }
        }
        if (remoteVersionsBuilder_ == null) {
          if (!other.remoteVersions_.isEmpty()) {
            if (remoteVersions_.isEmpty()) {
              remoteVersions_ = other.remoteVersions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureRemoteVersionsIsMutable();
              remoteVersions_.addAll(other.remoteVersions_);
            }
            onChanged();
          }
        } else {
          if (!other.remoteVersions_.isEmpty()) {
            if (remoteVersionsBuilder_.isEmpty()) {
              remoteVersionsBuilder_.dispose();
              remoteVersionsBuilder_ = null;
              remoteVersions_ = other.remoteVersions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              remoteVersionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRemoteVersionsFieldBuilder() : null;
            } else {
              remoteVersionsBuilder_.addAllMessages(other.remoteVersions_);
            }
          }
        }
        if (localVersionsBuilder_ == null) {
          if (!other.localVersions_.isEmpty()) {
            if (localVersions_.isEmpty()) {
              localVersions_ = other.localVersions_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureLocalVersionsIsMutable();
              localVersions_.addAll(other.localVersions_);
            }
            onChanged();
          }
        } else {
          if (!other.localVersions_.isEmpty()) {
            if (localVersionsBuilder_.isEmpty()) {
              localVersionsBuilder_.dispose();
              localVersionsBuilder_ = null;
              localVersions_ = other.localVersions_;
              bitField0_ = (bitField0_ & ~0x00000004);
              localVersionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLocalVersionsFieldBuilder() : null;
            } else {
              localVersionsBuilder_.addAllMessages(other.localVersions_);
            }
          }
        }
        if (mutualVersionsBuilder_ == null) {
          if (!other.mutualVersions_.isEmpty()) {
            if (mutualVersions_.isEmpty()) {
              mutualVersions_ = other.mutualVersions_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMutualVersionsIsMutable();
              mutualVersions_.addAll(other.mutualVersions_);
            }
            onChanged();
          }
        } else {
          if (!other.mutualVersions_.isEmpty()) {
            if (mutualVersionsBuilder_.isEmpty()) {
              mutualVersionsBuilder_.dispose();
              mutualVersionsBuilder_ = null;
              mutualVersions_ = other.mutualVersions_;
              bitField0_ = (bitField0_ & ~0x00000008);
              mutualVersionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMutualVersionsFieldBuilder() : null;
            } else {
              mutualVersionsBuilder_.addAllMessages(other.mutualVersions_);
            }
          }
        }
        if (!other.getDefaultVersion().isEmpty()) {
          defaultVersion_ = other.defaultVersion_;
          onChanged();
        }
        if (!other.getXcodeVersionFlag().isEmpty()) {
          xcodeVersionFlag_ = other.xcodeVersionFlag_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object selectedVersion_ = "";
      /**
       * <pre>
       * The Xcode version selected from this configuration to be used in the build.
       * </pre>
       *
       * <code>string selected_version = 1;</code>
       * @return The selectedVersion.
       */
      public java.lang.String getSelectedVersion() {
        java.lang.Object ref = selectedVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          selectedVersion_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Xcode version selected from this configuration to be used in the build.
       * </pre>
       *
       * <code>string selected_version = 1;</code>
       * @return The bytes for selectedVersion.
       */
      public com.google.protobuf.ByteString
          getSelectedVersionBytes() {
        java.lang.Object ref = selectedVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          selectedVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Xcode version selected from this configuration to be used in the build.
       * </pre>
       *
       * <code>string selected_version = 1;</code>
       * @param value The selectedVersion to set.
       * @return This builder for chaining.
       */
      public Builder setSelectedVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        selectedVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Xcode version selected from this configuration to be used in the build.
       * </pre>
       *
       * <code>string selected_version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSelectedVersion() {
        
        selectedVersion_ = getDefaultInstance().getSelectedVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Xcode version selected from this configuration to be used in the build.
       * </pre>
       *
       * <code>string selected_version = 1;</code>
       * @param value The bytes for selectedVersion to set.
       * @return This builder for chaining.
       */
      public Builder setSelectedVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        selectedVersion_ = value;
        onChanged();
        return this;
      }

      private int selectedVersionAvailability_ = 0;
      /**
       * <pre>
       * The availability of the selected Xcode version.
       * </pre>
       *
       * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
       * @return The enum numeric value on the wire for selectedVersionAvailability.
       */
      @java.lang.Override public int getSelectedVersionAvailabilityValue() {
        return selectedVersionAvailability_;
      }
      /**
       * <pre>
       * The availability of the selected Xcode version.
       * </pre>
       *
       * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
       * @param value The enum numeric value on the wire for selectedVersionAvailability to set.
       * @return This builder for chaining.
       */
      public Builder setSelectedVersionAvailabilityValue(int value) {
        
        selectedVersionAvailability_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The availability of the selected Xcode version.
       * </pre>
       *
       * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
       * @return The selectedVersionAvailability.
       */
      @java.lang.Override
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability getSelectedVersionAvailability() {
        @SuppressWarnings("deprecation")
        com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability result = com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability.valueOf(selectedVersionAvailability_);
        return result == null ? com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The availability of the selected Xcode version.
       * </pre>
       *
       * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
       * @param value The selectedVersionAvailability to set.
       * @return This builder for chaining.
       */
      public Builder setSelectedVersionAvailability(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo.Availability value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        selectedVersionAvailability_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The availability of the selected Xcode version.
       * </pre>
       *
       * <code>.xcode_config.XcodeConfigRuleInfo.Availability selected_version_availability = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSelectedVersionAvailability() {
        
        selectedVersionAvailability_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> explicitVersions_ =
        java.util.Collections.emptyList();
      private void ensureExplicitVersionsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          explicitVersions_ = new java.util.ArrayList<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo>(explicitVersions_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> explicitVersionsBuilder_;

      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> getExplicitVersionsList() {
        if (explicitVersionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(explicitVersions_);
        } else {
          return explicitVersionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public int getExplicitVersionsCount() {
        if (explicitVersionsBuilder_ == null) {
          return explicitVersions_.size();
        } else {
          return explicitVersionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getExplicitVersions(int index) {
        if (explicitVersionsBuilder_ == null) {
          return explicitVersions_.get(index);
        } else {
          return explicitVersionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder setExplicitVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (explicitVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExplicitVersionsIsMutable();
          explicitVersions_.set(index, value);
          onChanged();
        } else {
          explicitVersionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder setExplicitVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (explicitVersionsBuilder_ == null) {
          ensureExplicitVersionsIsMutable();
          explicitVersions_.set(index, builderForValue.build());
          onChanged();
        } else {
          explicitVersionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder addExplicitVersions(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (explicitVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExplicitVersionsIsMutable();
          explicitVersions_.add(value);
          onChanged();
        } else {
          explicitVersionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder addExplicitVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (explicitVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExplicitVersionsIsMutable();
          explicitVersions_.add(index, value);
          onChanged();
        } else {
          explicitVersionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder addExplicitVersions(
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (explicitVersionsBuilder_ == null) {
          ensureExplicitVersionsIsMutable();
          explicitVersions_.add(builderForValue.build());
          onChanged();
        } else {
          explicitVersionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder addExplicitVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (explicitVersionsBuilder_ == null) {
          ensureExplicitVersionsIsMutable();
          explicitVersions_.add(index, builderForValue.build());
          onChanged();
        } else {
          explicitVersionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder addAllExplicitVersions(
          java.lang.Iterable<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> values) {
        if (explicitVersionsBuilder_ == null) {
          ensureExplicitVersionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, explicitVersions_);
          onChanged();
        } else {
          explicitVersionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder clearExplicitVersions() {
        if (explicitVersionsBuilder_ == null) {
          explicitVersions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          explicitVersionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public Builder removeExplicitVersions(int index) {
        if (explicitVersionsBuilder_ == null) {
          ensureExplicitVersionsIsMutable();
          explicitVersions_.remove(index);
          onChanged();
        } else {
          explicitVersionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder getExplicitVersionsBuilder(
          int index) {
        return getExplicitVersionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getExplicitVersionsOrBuilder(
          int index) {
        if (explicitVersionsBuilder_ == null) {
          return explicitVersions_.get(index);  } else {
          return explicitVersionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
           getExplicitVersionsOrBuilderList() {
        if (explicitVersionsBuilder_ != null) {
          return explicitVersionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(explicitVersions_);
        }
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder addExplicitVersionsBuilder() {
        return getExplicitVersionsFieldBuilder().addBuilder(
            com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder addExplicitVersionsBuilder(
          int index) {
        return getExplicitVersionsFieldBuilder().addBuilder(
            index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * The explicitly listed (location-agnostic) Xcode versions in this
       * config, if there are any. A config will have either explicit versions or
       * both local and remote versions.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo explicit_versions = 3;</code>
       */
      public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder> 
           getExplicitVersionsBuilderList() {
        return getExplicitVersionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
          getExplicitVersionsFieldBuilder() {
        if (explicitVersionsBuilder_ == null) {
          explicitVersionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder>(
                  explicitVersions_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          explicitVersions_ = null;
        }
        return explicitVersionsBuilder_;
      }

      private java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> remoteVersions_ =
        java.util.Collections.emptyList();
      private void ensureRemoteVersionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          remoteVersions_ = new java.util.ArrayList<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo>(remoteVersions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> remoteVersionsBuilder_;

      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> getRemoteVersionsList() {
        if (remoteVersionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(remoteVersions_);
        } else {
          return remoteVersionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public int getRemoteVersionsCount() {
        if (remoteVersionsBuilder_ == null) {
          return remoteVersions_.size();
        } else {
          return remoteVersionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getRemoteVersions(int index) {
        if (remoteVersionsBuilder_ == null) {
          return remoteVersions_.get(index);
        } else {
          return remoteVersionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder setRemoteVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (remoteVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRemoteVersionsIsMutable();
          remoteVersions_.set(index, value);
          onChanged();
        } else {
          remoteVersionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder setRemoteVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (remoteVersionsBuilder_ == null) {
          ensureRemoteVersionsIsMutable();
          remoteVersions_.set(index, builderForValue.build());
          onChanged();
        } else {
          remoteVersionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder addRemoteVersions(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (remoteVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRemoteVersionsIsMutable();
          remoteVersions_.add(value);
          onChanged();
        } else {
          remoteVersionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder addRemoteVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (remoteVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRemoteVersionsIsMutable();
          remoteVersions_.add(index, value);
          onChanged();
        } else {
          remoteVersionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder addRemoteVersions(
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (remoteVersionsBuilder_ == null) {
          ensureRemoteVersionsIsMutable();
          remoteVersions_.add(builderForValue.build());
          onChanged();
        } else {
          remoteVersionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder addRemoteVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (remoteVersionsBuilder_ == null) {
          ensureRemoteVersionsIsMutable();
          remoteVersions_.add(index, builderForValue.build());
          onChanged();
        } else {
          remoteVersionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder addAllRemoteVersions(
          java.lang.Iterable<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> values) {
        if (remoteVersionsBuilder_ == null) {
          ensureRemoteVersionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, remoteVersions_);
          onChanged();
        } else {
          remoteVersionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder clearRemoteVersions() {
        if (remoteVersionsBuilder_ == null) {
          remoteVersions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          remoteVersionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public Builder removeRemoteVersions(int index) {
        if (remoteVersionsBuilder_ == null) {
          ensureRemoteVersionsIsMutable();
          remoteVersions_.remove(index);
          onChanged();
        } else {
          remoteVersionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder getRemoteVersionsBuilder(
          int index) {
        return getRemoteVersionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getRemoteVersionsOrBuilder(
          int index) {
        if (remoteVersionsBuilder_ == null) {
          return remoteVersions_.get(index);  } else {
          return remoteVersionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
           getRemoteVersionsOrBuilderList() {
        if (remoteVersionsBuilder_ != null) {
          return remoteVersionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(remoteVersions_);
        }
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder addRemoteVersionsBuilder() {
        return getRemoteVersionsFieldBuilder().addBuilder(
            com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder addRemoteVersionsBuilder(
          int index) {
        return getRemoteVersionsFieldBuilder().addBuilder(
            index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * The remote Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo remote_versions = 4;</code>
       */
      public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder> 
           getRemoteVersionsBuilderList() {
        return getRemoteVersionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
          getRemoteVersionsFieldBuilder() {
        if (remoteVersionsBuilder_ == null) {
          remoteVersionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder>(
                  remoteVersions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          remoteVersions_ = null;
        }
        return remoteVersionsBuilder_;
      }

      private java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> localVersions_ =
        java.util.Collections.emptyList();
      private void ensureLocalVersionsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          localVersions_ = new java.util.ArrayList<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo>(localVersions_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> localVersionsBuilder_;

      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> getLocalVersionsList() {
        if (localVersionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(localVersions_);
        } else {
          return localVersionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public int getLocalVersionsCount() {
        if (localVersionsBuilder_ == null) {
          return localVersions_.size();
        } else {
          return localVersionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getLocalVersions(int index) {
        if (localVersionsBuilder_ == null) {
          return localVersions_.get(index);
        } else {
          return localVersionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder setLocalVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (localVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocalVersionsIsMutable();
          localVersions_.set(index, value);
          onChanged();
        } else {
          localVersionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder setLocalVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (localVersionsBuilder_ == null) {
          ensureLocalVersionsIsMutable();
          localVersions_.set(index, builderForValue.build());
          onChanged();
        } else {
          localVersionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder addLocalVersions(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (localVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocalVersionsIsMutable();
          localVersions_.add(value);
          onChanged();
        } else {
          localVersionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder addLocalVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (localVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocalVersionsIsMutable();
          localVersions_.add(index, value);
          onChanged();
        } else {
          localVersionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder addLocalVersions(
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (localVersionsBuilder_ == null) {
          ensureLocalVersionsIsMutable();
          localVersions_.add(builderForValue.build());
          onChanged();
        } else {
          localVersionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder addLocalVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (localVersionsBuilder_ == null) {
          ensureLocalVersionsIsMutable();
          localVersions_.add(index, builderForValue.build());
          onChanged();
        } else {
          localVersionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder addAllLocalVersions(
          java.lang.Iterable<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> values) {
        if (localVersionsBuilder_ == null) {
          ensureLocalVersionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, localVersions_);
          onChanged();
        } else {
          localVersionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder clearLocalVersions() {
        if (localVersionsBuilder_ == null) {
          localVersions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          localVersionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public Builder removeLocalVersions(int index) {
        if (localVersionsBuilder_ == null) {
          ensureLocalVersionsIsMutable();
          localVersions_.remove(index);
          onChanged();
        } else {
          localVersionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder getLocalVersionsBuilder(
          int index) {
        return getLocalVersionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getLocalVersionsOrBuilder(
          int index) {
        if (localVersionsBuilder_ == null) {
          return localVersions_.get(index);  } else {
          return localVersionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
           getLocalVersionsOrBuilderList() {
        if (localVersionsBuilder_ != null) {
          return localVersionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(localVersions_);
        }
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder addLocalVersionsBuilder() {
        return getLocalVersionsFieldBuilder().addBuilder(
            com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder addLocalVersionsBuilder(
          int index) {
        return getLocalVersionsFieldBuilder().addBuilder(
            index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * The local Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo local_versions = 5;</code>
       */
      public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder> 
           getLocalVersionsBuilderList() {
        return getLocalVersionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
          getLocalVersionsFieldBuilder() {
        if (localVersionsBuilder_ == null) {
          localVersionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder>(
                  localVersions_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          localVersions_ = null;
        }
        return localVersionsBuilder_;
      }

      private java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> mutualVersions_ =
        java.util.Collections.emptyList();
      private void ensureMutualVersionsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          mutualVersions_ = new java.util.ArrayList<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo>(mutualVersions_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> mutualVersionsBuilder_;

      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> getMutualVersionsList() {
        if (mutualVersionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mutualVersions_);
        } else {
          return mutualVersionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public int getMutualVersionsCount() {
        if (mutualVersionsBuilder_ == null) {
          return mutualVersions_.size();
        } else {
          return mutualVersionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo getMutualVersions(int index) {
        if (mutualVersionsBuilder_ == null) {
          return mutualVersions_.get(index);
        } else {
          return mutualVersionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder setMutualVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (mutualVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMutualVersionsIsMutable();
          mutualVersions_.set(index, value);
          onChanged();
        } else {
          mutualVersionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder setMutualVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (mutualVersionsBuilder_ == null) {
          ensureMutualVersionsIsMutable();
          mutualVersions_.set(index, builderForValue.build());
          onChanged();
        } else {
          mutualVersionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder addMutualVersions(com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (mutualVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMutualVersionsIsMutable();
          mutualVersions_.add(value);
          onChanged();
        } else {
          mutualVersionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder addMutualVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo value) {
        if (mutualVersionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMutualVersionsIsMutable();
          mutualVersions_.add(index, value);
          onChanged();
        } else {
          mutualVersionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder addMutualVersions(
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (mutualVersionsBuilder_ == null) {
          ensureMutualVersionsIsMutable();
          mutualVersions_.add(builderForValue.build());
          onChanged();
        } else {
          mutualVersionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder addMutualVersions(
          int index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder builderForValue) {
        if (mutualVersionsBuilder_ == null) {
          ensureMutualVersionsIsMutable();
          mutualVersions_.add(index, builderForValue.build());
          onChanged();
        } else {
          mutualVersionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder addAllMutualVersions(
          java.lang.Iterable<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo> values) {
        if (mutualVersionsBuilder_ == null) {
          ensureMutualVersionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, mutualVersions_);
          onChanged();
        } else {
          mutualVersionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder clearMutualVersions() {
        if (mutualVersionsBuilder_ == null) {
          mutualVersions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          mutualVersionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public Builder removeMutualVersions(int index) {
        if (mutualVersionsBuilder_ == null) {
          ensureMutualVersionsIsMutable();
          mutualVersions_.remove(index);
          onChanged();
        } else {
          mutualVersionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder getMutualVersionsBuilder(
          int index) {
        return getMutualVersionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder getMutualVersionsOrBuilder(
          int index) {
        if (mutualVersionsBuilder_ == null) {
          return mutualVersions_.get(index);  } else {
          return mutualVersionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public java.util.List<? extends com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
           getMutualVersionsOrBuilderList() {
        if (mutualVersionsBuilder_ != null) {
          return mutualVersionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mutualVersions_);
        }
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder addMutualVersionsBuilder() {
        return getMutualVersionsFieldBuilder().addBuilder(
            com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder addMutualVersionsBuilder(
          int index) {
        return getMutualVersionsFieldBuilder().addBuilder(
            index, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * The mutually available Xcode versions in this config, if there are any.
       * </pre>
       *
       * <code>repeated .xcode_config.XcodeVersionInfo mutual_versions = 6;</code>
       */
      public java.util.List<com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder> 
           getMutualVersionsBuilderList() {
        return getMutualVersionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder> 
          getMutualVersionsFieldBuilder() {
        if (mutualVersionsBuilder_ == null) {
          mutualVersionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfo.Builder, com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeVersionInfoOrBuilder>(
                  mutualVersions_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          mutualVersions_ = null;
        }
        return mutualVersionsBuilder_;
      }

      private java.lang.Object defaultVersion_ = "";
      /**
       * <pre>
       * The default version of this Xcode config (explicit or local).
       * </pre>
       *
       * <code>string default_version = 7;</code>
       * @return The defaultVersion.
       */
      public java.lang.String getDefaultVersion() {
        java.lang.Object ref = defaultVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          defaultVersion_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The default version of this Xcode config (explicit or local).
       * </pre>
       *
       * <code>string default_version = 7;</code>
       * @return The bytes for defaultVersion.
       */
      public com.google.protobuf.ByteString
          getDefaultVersionBytes() {
        java.lang.Object ref = defaultVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          defaultVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The default version of this Xcode config (explicit or local).
       * </pre>
       *
       * <code>string default_version = 7;</code>
       * @param value The defaultVersion to set.
       * @return This builder for chaining.
       */
      public Builder setDefaultVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        defaultVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The default version of this Xcode config (explicit or local).
       * </pre>
       *
       * <code>string default_version = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearDefaultVersion() {
        
        defaultVersion_ = getDefaultInstance().getDefaultVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The default version of this Xcode config (explicit or local).
       * </pre>
       *
       * <code>string default_version = 7;</code>
       * @param value The bytes for defaultVersion to set.
       * @return This builder for chaining.
       */
      public Builder setDefaultVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        defaultVersion_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object xcodeVersionFlag_ = "";
      /**
       * <pre>
       * The value of the --xcode_version flag, if set.
       * </pre>
       *
       * <code>string xcode_version_flag = 8;</code>
       * @return The xcodeVersionFlag.
       */
      public java.lang.String getXcodeVersionFlag() {
        java.lang.Object ref = xcodeVersionFlag_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          xcodeVersionFlag_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The value of the --xcode_version flag, if set.
       * </pre>
       *
       * <code>string xcode_version_flag = 8;</code>
       * @return The bytes for xcodeVersionFlag.
       */
      public com.google.protobuf.ByteString
          getXcodeVersionFlagBytes() {
        java.lang.Object ref = xcodeVersionFlag_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          xcodeVersionFlag_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The value of the --xcode_version flag, if set.
       * </pre>
       *
       * <code>string xcode_version_flag = 8;</code>
       * @param value The xcodeVersionFlag to set.
       * @return This builder for chaining.
       */
      public Builder setXcodeVersionFlag(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        xcodeVersionFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The value of the --xcode_version flag, if set.
       * </pre>
       *
       * <code>string xcode_version_flag = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearXcodeVersionFlag() {
        
        xcodeVersionFlag_ = getDefaultInstance().getXcodeVersionFlag();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The value of the --xcode_version flag, if set.
       * </pre>
       *
       * <code>string xcode_version_flag = 8;</code>
       * @param value The bytes for xcodeVersionFlag to set.
       * @return This builder for chaining.
       */
      public Builder setXcodeVersionFlagBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        xcodeVersionFlag_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:xcode_config.XcodeConfigRuleInfo)
    }

    // @@protoc_insertion_point(class_scope:xcode_config.XcodeConfigRuleInfo)
    private static final com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo();
    }

    public static com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XcodeConfigRuleInfo>
        PARSER = new com.google.protobuf.AbstractParser<XcodeConfigRuleInfo>() {
      @java.lang.Override
      public XcodeConfigRuleInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new XcodeConfigRuleInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<XcodeConfigRuleInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XcodeConfigRuleInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.xcode.proto.XcodeConfig.XcodeConfigRuleInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xcode_config_XcodeVersionInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xcode_config_XcodeVersionInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xcode_config_XcodeConfigRuleInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xcode_config_XcodeConfigRuleInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n$src/main/protobuf/xcode_config.proto\022\014" +
      "xcode_config\"4\n\020XcodeVersionInfo\022\017\n\007vers" +
      "ion\030\001 \001(\t\022\017\n\007aliases\030\002 \003(\t\"\336\003\n\023XcodeConf" +
      "igRuleInfo\022\030\n\020selected_version\030\001 \001(\t\022U\n\035" +
      "selected_version_availability\030\002 \001(\0162..xc" +
      "ode_config.XcodeConfigRuleInfo.Availabil" +
      "ity\0229\n\021explicit_versions\030\003 \003(\0132\036.xcode_c" +
      "onfig.XcodeVersionInfo\0227\n\017remote_version" +
      "s\030\004 \003(\0132\036.xcode_config.XcodeVersionInfo\022" +
      "6\n\016local_versions\030\005 \003(\0132\036.xcode_config.X" +
      "codeVersionInfo\0227\n\017mutual_versions\030\006 \003(\013" +
      "2\036.xcode_config.XcodeVersionInfo\022\027\n\017defa" +
      "ult_version\030\007 \001(\t\022\032\n\022xcode_version_flag\030" +
      "\010 \001(\t\"<\n\014Availability\022\013\n\007UNKNOWN\020\000\022\t\n\005LO" +
      "CAL\020\001\022\n\n\006REMOTE\020\002\022\010\n\004BOTH\020\003B+\n)com.googl" +
      "e.devtools.build.lib.xcode.protob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_xcode_config_XcodeVersionInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_xcode_config_XcodeVersionInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xcode_config_XcodeVersionInfo_descriptor,
        new java.lang.String[] { "Version", "Aliases", });
    internal_static_xcode_config_XcodeConfigRuleInfo_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_xcode_config_XcodeConfigRuleInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xcode_config_XcodeConfigRuleInfo_descriptor,
        new java.lang.String[] { "SelectedVersion", "SelectedVersionAvailability", "ExplicitVersions", "RemoteVersions", "LocalVersions", "MutualVersions", "DefaultVersion", "XcodeVersionFlag", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
