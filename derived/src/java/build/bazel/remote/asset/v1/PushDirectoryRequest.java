// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/asset/v1/remote_asset.proto

package build.bazel.remote.asset.v1;

/**
 * <pre>
 * A request message for
 * [Push.PushDirectory][build.bazel.remote.asset.v1.Push.PushDirectory].
 * </pre>
 *
 * Protobuf type {@code build.bazel.remote.asset.v1.PushDirectoryRequest}
 */
public final class PushDirectoryRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:build.bazel.remote.asset.v1.PushDirectoryRequest)
    PushDirectoryRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PushDirectoryRequest.newBuilder() to construct.
  private PushDirectoryRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PushDirectoryRequest() {
    instanceName_ = "";
    uris_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    qualifiers_ = java.util.Collections.emptyList();
    referencesBlobs_ = java.util.Collections.emptyList();
    referencesDirectories_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PushDirectoryRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PushDirectoryRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            instanceName_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              uris_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            uris_.add(s);
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              qualifiers_ = new java.util.ArrayList<build.bazel.remote.asset.v1.Qualifier>();
              mutable_bitField0_ |= 0x00000002;
            }
            qualifiers_.add(
                input.readMessage(build.bazel.remote.asset.v1.Qualifier.parser(), extensionRegistry));
            break;
          }
          case 34: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (expireAt_ != null) {
              subBuilder = expireAt_.toBuilder();
            }
            expireAt_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(expireAt_);
              expireAt_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            build.bazel.remote.execution.v2.Digest.Builder subBuilder = null;
            if (rootDirectoryDigest_ != null) {
              subBuilder = rootDirectoryDigest_.toBuilder();
            }
            rootDirectoryDigest_ = input.readMessage(build.bazel.remote.execution.v2.Digest.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(rootDirectoryDigest_);
              rootDirectoryDigest_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              referencesBlobs_ = new java.util.ArrayList<build.bazel.remote.execution.v2.Digest>();
              mutable_bitField0_ |= 0x00000004;
            }
            referencesBlobs_.add(
                input.readMessage(build.bazel.remote.execution.v2.Digest.parser(), extensionRegistry));
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              referencesDirectories_ = new java.util.ArrayList<build.bazel.remote.execution.v2.Digest>();
              mutable_bitField0_ |= 0x00000008;
            }
            referencesDirectories_.add(
                input.readMessage(build.bazel.remote.execution.v2.Digest.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        uris_ = uris_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        qualifiers_ = java.util.Collections.unmodifiableList(qualifiers_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        referencesBlobs_ = java.util.Collections.unmodifiableList(referencesBlobs_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        referencesDirectories_ = java.util.Collections.unmodifiableList(referencesDirectories_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return build.bazel.remote.asset.v1.RemoteAssetProto.internal_static_build_bazel_remote_asset_v1_PushDirectoryRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return build.bazel.remote.asset.v1.RemoteAssetProto.internal_static_build_bazel_remote_asset_v1_PushDirectoryRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            build.bazel.remote.asset.v1.PushDirectoryRequest.class, build.bazel.remote.asset.v1.PushDirectoryRequest.Builder.class);
  }

  public static final int INSTANCE_NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object instanceName_;
  /**
   * <pre>
   * The instance of the execution system to operate against. A server may
   * support multiple instances of the execution system (with their own workers,
   * storage, caches, etc.). The server MAY require use of this field to select
   * between them in an implementation-defined fashion, otherwise it can be
   * omitted.
   * </pre>
   *
   * <code>string instance_name = 1;</code>
   * @return The instanceName.
   */
  @java.lang.Override
  public java.lang.String getInstanceName() {
    java.lang.Object ref = instanceName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      instanceName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The instance of the execution system to operate against. A server may
   * support multiple instances of the execution system (with their own workers,
   * storage, caches, etc.). The server MAY require use of this field to select
   * between them in an implementation-defined fashion, otherwise it can be
   * omitted.
   * </pre>
   *
   * <code>string instance_name = 1;</code>
   * @return The bytes for instanceName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getInstanceNameBytes() {
    java.lang.Object ref = instanceName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      instanceName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int URIS_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList uris_;
  /**
   * <pre>
   * The URI(s) of the content to associate. If multiple URIs are specified, the
   * pushed content will be available to fetch by specifying any of them.
   * </pre>
   *
   * <code>repeated string uris = 2;</code>
   * @return A list containing the uris.
   */
  public com.google.protobuf.ProtocolStringList
      getUrisList() {
    return uris_;
  }
  /**
   * <pre>
   * The URI(s) of the content to associate. If multiple URIs are specified, the
   * pushed content will be available to fetch by specifying any of them.
   * </pre>
   *
   * <code>repeated string uris = 2;</code>
   * @return The count of uris.
   */
  public int getUrisCount() {
    return uris_.size();
  }
  /**
   * <pre>
   * The URI(s) of the content to associate. If multiple URIs are specified, the
   * pushed content will be available to fetch by specifying any of them.
   * </pre>
   *
   * <code>repeated string uris = 2;</code>
   * @param index The index of the element to return.
   * @return The uris at the given index.
   */
  public java.lang.String getUris(int index) {
    return uris_.get(index);
  }
  /**
   * <pre>
   * The URI(s) of the content to associate. If multiple URIs are specified, the
   * pushed content will be available to fetch by specifying any of them.
   * </pre>
   *
   * <code>repeated string uris = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the uris at the given index.
   */
  public com.google.protobuf.ByteString
      getUrisBytes(int index) {
    return uris_.getByteString(index);
  }

  public static final int QUALIFIERS_FIELD_NUMBER = 3;
  private java.util.List<build.bazel.remote.asset.v1.Qualifier> qualifiers_;
  /**
   * <pre>
   * Qualifiers sub-specifying the content that is being pushed - see comments
   * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
   */
  @java.lang.Override
  public java.util.List<build.bazel.remote.asset.v1.Qualifier> getQualifiersList() {
    return qualifiers_;
  }
  /**
   * <pre>
   * Qualifiers sub-specifying the content that is being pushed - see comments
   * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends build.bazel.remote.asset.v1.QualifierOrBuilder> 
      getQualifiersOrBuilderList() {
    return qualifiers_;
  }
  /**
   * <pre>
   * Qualifiers sub-specifying the content that is being pushed - see comments
   * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
   */
  @java.lang.Override
  public int getQualifiersCount() {
    return qualifiers_.size();
  }
  /**
   * <pre>
   * Qualifiers sub-specifying the content that is being pushed - see comments
   * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
   */
  @java.lang.Override
  public build.bazel.remote.asset.v1.Qualifier getQualifiers(int index) {
    return qualifiers_.get(index);
  }
  /**
   * <pre>
   * Qualifiers sub-specifying the content that is being pushed - see comments
   * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
   */
  @java.lang.Override
  public build.bazel.remote.asset.v1.QualifierOrBuilder getQualifiersOrBuilder(
      int index) {
    return qualifiers_.get(index);
  }

  public static final int EXPIRE_AT_FIELD_NUMBER = 4;
  private com.google.protobuf.Timestamp expireAt_;
  /**
   * <pre>
   * A time after which this content should stop being returned via
   * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
   * Servers *MAY* expire content early, e.g. due to storage pressure.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_at = 4;</code>
   * @return Whether the expireAt field is set.
   */
  @java.lang.Override
  public boolean hasExpireAt() {
    return expireAt_ != null;
  }
  /**
   * <pre>
   * A time after which this content should stop being returned via
   * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
   * Servers *MAY* expire content early, e.g. due to storage pressure.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_at = 4;</code>
   * @return The expireAt.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getExpireAt() {
    return expireAt_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireAt_;
  }
  /**
   * <pre>
   * A time after which this content should stop being returned via
   * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
   * Servers *MAY* expire content early, e.g. due to storage pressure.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_at = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getExpireAtOrBuilder() {
    return getExpireAt();
  }

  public static final int ROOT_DIRECTORY_DIGEST_FIELD_NUMBER = 5;
  private build.bazel.remote.execution.v2.Digest rootDirectoryDigest_;
  /**
   * <pre>
   * Directory to associate
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
   * @return Whether the rootDirectoryDigest field is set.
   */
  @java.lang.Override
  public boolean hasRootDirectoryDigest() {
    return rootDirectoryDigest_ != null;
  }
  /**
   * <pre>
   * Directory to associate
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
   * @return The rootDirectoryDigest.
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.Digest getRootDirectoryDigest() {
    return rootDirectoryDigest_ == null ? build.bazel.remote.execution.v2.Digest.getDefaultInstance() : rootDirectoryDigest_;
  }
  /**
   * <pre>
   * Directory to associate
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.DigestOrBuilder getRootDirectoryDigestOrBuilder() {
    return getRootDirectoryDigest();
  }

  public static final int REFERENCES_BLOBS_FIELD_NUMBER = 6;
  private java.util.List<build.bazel.remote.execution.v2.Digest> referencesBlobs_;
  /**
   * <pre>
   * Referenced blobs or directories that need to not expire before expiration
   * of this association, in addition to `root_directory_digest` itself.
   * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
   * respect them, at the risk of increased incidents of Fetch responses
   * indirectly referencing unavailable blobs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
   */
  @java.lang.Override
  public java.util.List<build.bazel.remote.execution.v2.Digest> getReferencesBlobsList() {
    return referencesBlobs_;
  }
  /**
   * <pre>
   * Referenced blobs or directories that need to not expire before expiration
   * of this association, in addition to `root_directory_digest` itself.
   * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
   * respect them, at the risk of increased incidents of Fetch responses
   * indirectly referencing unavailable blobs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends build.bazel.remote.execution.v2.DigestOrBuilder> 
      getReferencesBlobsOrBuilderList() {
    return referencesBlobs_;
  }
  /**
   * <pre>
   * Referenced blobs or directories that need to not expire before expiration
   * of this association, in addition to `root_directory_digest` itself.
   * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
   * respect them, at the risk of increased incidents of Fetch responses
   * indirectly referencing unavailable blobs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
   */
  @java.lang.Override
  public int getReferencesBlobsCount() {
    return referencesBlobs_.size();
  }
  /**
   * <pre>
   * Referenced blobs or directories that need to not expire before expiration
   * of this association, in addition to `root_directory_digest` itself.
   * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
   * respect them, at the risk of increased incidents of Fetch responses
   * indirectly referencing unavailable blobs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.Digest getReferencesBlobs(int index) {
    return referencesBlobs_.get(index);
  }
  /**
   * <pre>
   * Referenced blobs or directories that need to not expire before expiration
   * of this association, in addition to `root_directory_digest` itself.
   * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
   * respect them, at the risk of increased incidents of Fetch responses
   * indirectly referencing unavailable blobs.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.DigestOrBuilder getReferencesBlobsOrBuilder(
      int index) {
    return referencesBlobs_.get(index);
  }

  public static final int REFERENCES_DIRECTORIES_FIELD_NUMBER = 7;
  private java.util.List<build.bazel.remote.execution.v2.Digest> referencesDirectories_;
  /**
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
   */
  @java.lang.Override
  public java.util.List<build.bazel.remote.execution.v2.Digest> getReferencesDirectoriesList() {
    return referencesDirectories_;
  }
  /**
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
   */
  @java.lang.Override
  public java.util.List<? extends build.bazel.remote.execution.v2.DigestOrBuilder> 
      getReferencesDirectoriesOrBuilderList() {
    return referencesDirectories_;
  }
  /**
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
   */
  @java.lang.Override
  public int getReferencesDirectoriesCount() {
    return referencesDirectories_.size();
  }
  /**
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.Digest getReferencesDirectories(int index) {
    return referencesDirectories_.get(index);
  }
  /**
   * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.DigestOrBuilder getReferencesDirectoriesOrBuilder(
      int index) {
    return referencesDirectories_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getInstanceNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instanceName_);
    }
    for (int i = 0; i < uris_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, uris_.getRaw(i));
    }
    for (int i = 0; i < qualifiers_.size(); i++) {
      output.writeMessage(3, qualifiers_.get(i));
    }
    if (expireAt_ != null) {
      output.writeMessage(4, getExpireAt());
    }
    if (rootDirectoryDigest_ != null) {
      output.writeMessage(5, getRootDirectoryDigest());
    }
    for (int i = 0; i < referencesBlobs_.size(); i++) {
      output.writeMessage(6, referencesBlobs_.get(i));
    }
    for (int i = 0; i < referencesDirectories_.size(); i++) {
      output.writeMessage(7, referencesDirectories_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getInstanceNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instanceName_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < uris_.size(); i++) {
        dataSize += computeStringSizeNoTag(uris_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getUrisList().size();
    }
    for (int i = 0; i < qualifiers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, qualifiers_.get(i));
    }
    if (expireAt_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getExpireAt());
    }
    if (rootDirectoryDigest_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getRootDirectoryDigest());
    }
    for (int i = 0; i < referencesBlobs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, referencesBlobs_.get(i));
    }
    for (int i = 0; i < referencesDirectories_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, referencesDirectories_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof build.bazel.remote.asset.v1.PushDirectoryRequest)) {
      return super.equals(obj);
    }
    build.bazel.remote.asset.v1.PushDirectoryRequest other = (build.bazel.remote.asset.v1.PushDirectoryRequest) obj;

    if (!getInstanceName()
        .equals(other.getInstanceName())) return false;
    if (!getUrisList()
        .equals(other.getUrisList())) return false;
    if (!getQualifiersList()
        .equals(other.getQualifiersList())) return false;
    if (hasExpireAt() != other.hasExpireAt()) return false;
    if (hasExpireAt()) {
      if (!getExpireAt()
          .equals(other.getExpireAt())) return false;
    }
    if (hasRootDirectoryDigest() != other.hasRootDirectoryDigest()) return false;
    if (hasRootDirectoryDigest()) {
      if (!getRootDirectoryDigest()
          .equals(other.getRootDirectoryDigest())) return false;
    }
    if (!getReferencesBlobsList()
        .equals(other.getReferencesBlobsList())) return false;
    if (!getReferencesDirectoriesList()
        .equals(other.getReferencesDirectoriesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + INSTANCE_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getInstanceName().hashCode();
    if (getUrisCount() > 0) {
      hash = (37 * hash) + URIS_FIELD_NUMBER;
      hash = (53 * hash) + getUrisList().hashCode();
    }
    if (getQualifiersCount() > 0) {
      hash = (37 * hash) + QUALIFIERS_FIELD_NUMBER;
      hash = (53 * hash) + getQualifiersList().hashCode();
    }
    if (hasExpireAt()) {
      hash = (37 * hash) + EXPIRE_AT_FIELD_NUMBER;
      hash = (53 * hash) + getExpireAt().hashCode();
    }
    if (hasRootDirectoryDigest()) {
      hash = (37 * hash) + ROOT_DIRECTORY_DIGEST_FIELD_NUMBER;
      hash = (53 * hash) + getRootDirectoryDigest().hashCode();
    }
    if (getReferencesBlobsCount() > 0) {
      hash = (37 * hash) + REFERENCES_BLOBS_FIELD_NUMBER;
      hash = (53 * hash) + getReferencesBlobsList().hashCode();
    }
    if (getReferencesDirectoriesCount() > 0) {
      hash = (37 * hash) + REFERENCES_DIRECTORIES_FIELD_NUMBER;
      hash = (53 * hash) + getReferencesDirectoriesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.asset.v1.PushDirectoryRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(build.bazel.remote.asset.v1.PushDirectoryRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A request message for
   * [Push.PushDirectory][build.bazel.remote.asset.v1.Push.PushDirectory].
   * </pre>
   *
   * Protobuf type {@code build.bazel.remote.asset.v1.PushDirectoryRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:build.bazel.remote.asset.v1.PushDirectoryRequest)
      build.bazel.remote.asset.v1.PushDirectoryRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return build.bazel.remote.asset.v1.RemoteAssetProto.internal_static_build_bazel_remote_asset_v1_PushDirectoryRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return build.bazel.remote.asset.v1.RemoteAssetProto.internal_static_build_bazel_remote_asset_v1_PushDirectoryRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              build.bazel.remote.asset.v1.PushDirectoryRequest.class, build.bazel.remote.asset.v1.PushDirectoryRequest.Builder.class);
    }

    // Construct using build.bazel.remote.asset.v1.PushDirectoryRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getQualifiersFieldBuilder();
        getReferencesBlobsFieldBuilder();
        getReferencesDirectoriesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      instanceName_ = "";

      uris_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (qualifiersBuilder_ == null) {
        qualifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        qualifiersBuilder_.clear();
      }
      if (expireAtBuilder_ == null) {
        expireAt_ = null;
      } else {
        expireAt_ = null;
        expireAtBuilder_ = null;
      }
      if (rootDirectoryDigestBuilder_ == null) {
        rootDirectoryDigest_ = null;
      } else {
        rootDirectoryDigest_ = null;
        rootDirectoryDigestBuilder_ = null;
      }
      if (referencesBlobsBuilder_ == null) {
        referencesBlobs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        referencesBlobsBuilder_.clear();
      }
      if (referencesDirectoriesBuilder_ == null) {
        referencesDirectories_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        referencesDirectoriesBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return build.bazel.remote.asset.v1.RemoteAssetProto.internal_static_build_bazel_remote_asset_v1_PushDirectoryRequest_descriptor;
    }

    @java.lang.Override
    public build.bazel.remote.asset.v1.PushDirectoryRequest getDefaultInstanceForType() {
      return build.bazel.remote.asset.v1.PushDirectoryRequest.getDefaultInstance();
    }

    @java.lang.Override
    public build.bazel.remote.asset.v1.PushDirectoryRequest build() {
      build.bazel.remote.asset.v1.PushDirectoryRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public build.bazel.remote.asset.v1.PushDirectoryRequest buildPartial() {
      build.bazel.remote.asset.v1.PushDirectoryRequest result = new build.bazel.remote.asset.v1.PushDirectoryRequest(this);
      int from_bitField0_ = bitField0_;
      result.instanceName_ = instanceName_;
      if (((bitField0_ & 0x00000001) != 0)) {
        uris_ = uris_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.uris_ = uris_;
      if (qualifiersBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          qualifiers_ = java.util.Collections.unmodifiableList(qualifiers_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.qualifiers_ = qualifiers_;
      } else {
        result.qualifiers_ = qualifiersBuilder_.build();
      }
      if (expireAtBuilder_ == null) {
        result.expireAt_ = expireAt_;
      } else {
        result.expireAt_ = expireAtBuilder_.build();
      }
      if (rootDirectoryDigestBuilder_ == null) {
        result.rootDirectoryDigest_ = rootDirectoryDigest_;
      } else {
        result.rootDirectoryDigest_ = rootDirectoryDigestBuilder_.build();
      }
      if (referencesBlobsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          referencesBlobs_ = java.util.Collections.unmodifiableList(referencesBlobs_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.referencesBlobs_ = referencesBlobs_;
      } else {
        result.referencesBlobs_ = referencesBlobsBuilder_.build();
      }
      if (referencesDirectoriesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          referencesDirectories_ = java.util.Collections.unmodifiableList(referencesDirectories_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.referencesDirectories_ = referencesDirectories_;
      } else {
        result.referencesDirectories_ = referencesDirectoriesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof build.bazel.remote.asset.v1.PushDirectoryRequest) {
        return mergeFrom((build.bazel.remote.asset.v1.PushDirectoryRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(build.bazel.remote.asset.v1.PushDirectoryRequest other) {
      if (other == build.bazel.remote.asset.v1.PushDirectoryRequest.getDefaultInstance()) return this;
      if (!other.getInstanceName().isEmpty()) {
        instanceName_ = other.instanceName_;
        onChanged();
      }
      if (!other.uris_.isEmpty()) {
        if (uris_.isEmpty()) {
          uris_ = other.uris_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureUrisIsMutable();
          uris_.addAll(other.uris_);
        }
        onChanged();
      }
      if (qualifiersBuilder_ == null) {
        if (!other.qualifiers_.isEmpty()) {
          if (qualifiers_.isEmpty()) {
            qualifiers_ = other.qualifiers_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureQualifiersIsMutable();
            qualifiers_.addAll(other.qualifiers_);
          }
          onChanged();
        }
      } else {
        if (!other.qualifiers_.isEmpty()) {
          if (qualifiersBuilder_.isEmpty()) {
            qualifiersBuilder_.dispose();
            qualifiersBuilder_ = null;
            qualifiers_ = other.qualifiers_;
            bitField0_ = (bitField0_ & ~0x00000002);
            qualifiersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getQualifiersFieldBuilder() : null;
          } else {
            qualifiersBuilder_.addAllMessages(other.qualifiers_);
          }
        }
      }
      if (other.hasExpireAt()) {
        mergeExpireAt(other.getExpireAt());
      }
      if (other.hasRootDirectoryDigest()) {
        mergeRootDirectoryDigest(other.getRootDirectoryDigest());
      }
      if (referencesBlobsBuilder_ == null) {
        if (!other.referencesBlobs_.isEmpty()) {
          if (referencesBlobs_.isEmpty()) {
            referencesBlobs_ = other.referencesBlobs_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureReferencesBlobsIsMutable();
            referencesBlobs_.addAll(other.referencesBlobs_);
          }
          onChanged();
        }
      } else {
        if (!other.referencesBlobs_.isEmpty()) {
          if (referencesBlobsBuilder_.isEmpty()) {
            referencesBlobsBuilder_.dispose();
            referencesBlobsBuilder_ = null;
            referencesBlobs_ = other.referencesBlobs_;
            bitField0_ = (bitField0_ & ~0x00000004);
            referencesBlobsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getReferencesBlobsFieldBuilder() : null;
          } else {
            referencesBlobsBuilder_.addAllMessages(other.referencesBlobs_);
          }
        }
      }
      if (referencesDirectoriesBuilder_ == null) {
        if (!other.referencesDirectories_.isEmpty()) {
          if (referencesDirectories_.isEmpty()) {
            referencesDirectories_ = other.referencesDirectories_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureReferencesDirectoriesIsMutable();
            referencesDirectories_.addAll(other.referencesDirectories_);
          }
          onChanged();
        }
      } else {
        if (!other.referencesDirectories_.isEmpty()) {
          if (referencesDirectoriesBuilder_.isEmpty()) {
            referencesDirectoriesBuilder_.dispose();
            referencesDirectoriesBuilder_ = null;
            referencesDirectories_ = other.referencesDirectories_;
            bitField0_ = (bitField0_ & ~0x00000008);
            referencesDirectoriesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getReferencesDirectoriesFieldBuilder() : null;
          } else {
            referencesDirectoriesBuilder_.addAllMessages(other.referencesDirectories_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      build.bazel.remote.asset.v1.PushDirectoryRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (build.bazel.remote.asset.v1.PushDirectoryRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object instanceName_ = "";
    /**
     * <pre>
     * The instance of the execution system to operate against. A server may
     * support multiple instances of the execution system (with their own workers,
     * storage, caches, etc.). The server MAY require use of this field to select
     * between them in an implementation-defined fashion, otherwise it can be
     * omitted.
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @return The instanceName.
     */
    public java.lang.String getInstanceName() {
      java.lang.Object ref = instanceName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instanceName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The instance of the execution system to operate against. A server may
     * support multiple instances of the execution system (with their own workers,
     * storage, caches, etc.). The server MAY require use of this field to select
     * between them in an implementation-defined fashion, otherwise it can be
     * omitted.
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @return The bytes for instanceName.
     */
    public com.google.protobuf.ByteString
        getInstanceNameBytes() {
      java.lang.Object ref = instanceName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instanceName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The instance of the execution system to operate against. A server may
     * support multiple instances of the execution system (with their own workers,
     * storage, caches, etc.). The server MAY require use of this field to select
     * between them in an implementation-defined fashion, otherwise it can be
     * omitted.
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @param value The instanceName to set.
     * @return This builder for chaining.
     */
    public Builder setInstanceName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      instanceName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The instance of the execution system to operate against. A server may
     * support multiple instances of the execution system (with their own workers,
     * storage, caches, etc.). The server MAY require use of this field to select
     * between them in an implementation-defined fashion, otherwise it can be
     * omitted.
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearInstanceName() {
      
      instanceName_ = getDefaultInstance().getInstanceName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The instance of the execution system to operate against. A server may
     * support multiple instances of the execution system (with their own workers,
     * storage, caches, etc.). The server MAY require use of this field to select
     * between them in an implementation-defined fashion, otherwise it can be
     * omitted.
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @param value The bytes for instanceName to set.
     * @return This builder for chaining.
     */
    public Builder setInstanceNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      instanceName_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList uris_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureUrisIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        uris_ = new com.google.protobuf.LazyStringArrayList(uris_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @return A list containing the uris.
     */
    public com.google.protobuf.ProtocolStringList
        getUrisList() {
      return uris_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @return The count of uris.
     */
    public int getUrisCount() {
      return uris_.size();
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @param index The index of the element to return.
     * @return The uris at the given index.
     */
    public java.lang.String getUris(int index) {
      return uris_.get(index);
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the uris at the given index.
     */
    public com.google.protobuf.ByteString
        getUrisBytes(int index) {
      return uris_.getByteString(index);
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @param index The index to set the value at.
     * @param value The uris to set.
     * @return This builder for chaining.
     */
    public Builder setUris(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureUrisIsMutable();
      uris_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @param value The uris to add.
     * @return This builder for chaining.
     */
    public Builder addUris(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureUrisIsMutable();
      uris_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @param values The uris to add.
     * @return This builder for chaining.
     */
    public Builder addAllUris(
        java.lang.Iterable<java.lang.String> values) {
      ensureUrisIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, uris_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearUris() {
      uris_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The URI(s) of the content to associate. If multiple URIs are specified, the
     * pushed content will be available to fetch by specifying any of them.
     * </pre>
     *
     * <code>repeated string uris = 2;</code>
     * @param value The bytes of the uris to add.
     * @return This builder for chaining.
     */
    public Builder addUrisBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureUrisIsMutable();
      uris_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<build.bazel.remote.asset.v1.Qualifier> qualifiers_ =
      java.util.Collections.emptyList();
    private void ensureQualifiersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        qualifiers_ = new java.util.ArrayList<build.bazel.remote.asset.v1.Qualifier>(qualifiers_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        build.bazel.remote.asset.v1.Qualifier, build.bazel.remote.asset.v1.Qualifier.Builder, build.bazel.remote.asset.v1.QualifierOrBuilder> qualifiersBuilder_;

    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public java.util.List<build.bazel.remote.asset.v1.Qualifier> getQualifiersList() {
      if (qualifiersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(qualifiers_);
      } else {
        return qualifiersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public int getQualifiersCount() {
      if (qualifiersBuilder_ == null) {
        return qualifiers_.size();
      } else {
        return qualifiersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public build.bazel.remote.asset.v1.Qualifier getQualifiers(int index) {
      if (qualifiersBuilder_ == null) {
        return qualifiers_.get(index);
      } else {
        return qualifiersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder setQualifiers(
        int index, build.bazel.remote.asset.v1.Qualifier value) {
      if (qualifiersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQualifiersIsMutable();
        qualifiers_.set(index, value);
        onChanged();
      } else {
        qualifiersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder setQualifiers(
        int index, build.bazel.remote.asset.v1.Qualifier.Builder builderForValue) {
      if (qualifiersBuilder_ == null) {
        ensureQualifiersIsMutable();
        qualifiers_.set(index, builderForValue.build());
        onChanged();
      } else {
        qualifiersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder addQualifiers(build.bazel.remote.asset.v1.Qualifier value) {
      if (qualifiersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQualifiersIsMutable();
        qualifiers_.add(value);
        onChanged();
      } else {
        qualifiersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder addQualifiers(
        int index, build.bazel.remote.asset.v1.Qualifier value) {
      if (qualifiersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQualifiersIsMutable();
        qualifiers_.add(index, value);
        onChanged();
      } else {
        qualifiersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder addQualifiers(
        build.bazel.remote.asset.v1.Qualifier.Builder builderForValue) {
      if (qualifiersBuilder_ == null) {
        ensureQualifiersIsMutable();
        qualifiers_.add(builderForValue.build());
        onChanged();
      } else {
        qualifiersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder addQualifiers(
        int index, build.bazel.remote.asset.v1.Qualifier.Builder builderForValue) {
      if (qualifiersBuilder_ == null) {
        ensureQualifiersIsMutable();
        qualifiers_.add(index, builderForValue.build());
        onChanged();
      } else {
        qualifiersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder addAllQualifiers(
        java.lang.Iterable<? extends build.bazel.remote.asset.v1.Qualifier> values) {
      if (qualifiersBuilder_ == null) {
        ensureQualifiersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, qualifiers_);
        onChanged();
      } else {
        qualifiersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder clearQualifiers() {
      if (qualifiersBuilder_ == null) {
        qualifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        qualifiersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public Builder removeQualifiers(int index) {
      if (qualifiersBuilder_ == null) {
        ensureQualifiersIsMutable();
        qualifiers_.remove(index);
        onChanged();
      } else {
        qualifiersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public build.bazel.remote.asset.v1.Qualifier.Builder getQualifiersBuilder(
        int index) {
      return getQualifiersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public build.bazel.remote.asset.v1.QualifierOrBuilder getQualifiersOrBuilder(
        int index) {
      if (qualifiersBuilder_ == null) {
        return qualifiers_.get(index);  } else {
        return qualifiersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public java.util.List<? extends build.bazel.remote.asset.v1.QualifierOrBuilder> 
         getQualifiersOrBuilderList() {
      if (qualifiersBuilder_ != null) {
        return qualifiersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(qualifiers_);
      }
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public build.bazel.remote.asset.v1.Qualifier.Builder addQualifiersBuilder() {
      return getQualifiersFieldBuilder().addBuilder(
          build.bazel.remote.asset.v1.Qualifier.getDefaultInstance());
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public build.bazel.remote.asset.v1.Qualifier.Builder addQualifiersBuilder(
        int index) {
      return getQualifiersFieldBuilder().addBuilder(
          index, build.bazel.remote.asset.v1.Qualifier.getDefaultInstance());
    }
    /**
     * <pre>
     * Qualifiers sub-specifying the content that is being pushed - see comments
     * on [Qualifier][build.bazel.remote.asset.v1.Qualifier].
     * The same qualifiers apply to all URIs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 3;</code>
     */
    public java.util.List<build.bazel.remote.asset.v1.Qualifier.Builder> 
         getQualifiersBuilderList() {
      return getQualifiersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        build.bazel.remote.asset.v1.Qualifier, build.bazel.remote.asset.v1.Qualifier.Builder, build.bazel.remote.asset.v1.QualifierOrBuilder> 
        getQualifiersFieldBuilder() {
      if (qualifiersBuilder_ == null) {
        qualifiersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            build.bazel.remote.asset.v1.Qualifier, build.bazel.remote.asset.v1.Qualifier.Builder, build.bazel.remote.asset.v1.QualifierOrBuilder>(
                qualifiers_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        qualifiers_ = null;
      }
      return qualifiersBuilder_;
    }

    private com.google.protobuf.Timestamp expireAt_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> expireAtBuilder_;
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     * @return Whether the expireAt field is set.
     */
    public boolean hasExpireAt() {
      return expireAtBuilder_ != null || expireAt_ != null;
    }
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     * @return The expireAt.
     */
    public com.google.protobuf.Timestamp getExpireAt() {
      if (expireAtBuilder_ == null) {
        return expireAt_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireAt_;
      } else {
        return expireAtBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     */
    public Builder setExpireAt(com.google.protobuf.Timestamp value) {
      if (expireAtBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expireAt_ = value;
        onChanged();
      } else {
        expireAtBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     */
    public Builder setExpireAt(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (expireAtBuilder_ == null) {
        expireAt_ = builderForValue.build();
        onChanged();
      } else {
        expireAtBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     */
    public Builder mergeExpireAt(com.google.protobuf.Timestamp value) {
      if (expireAtBuilder_ == null) {
        if (expireAt_ != null) {
          expireAt_ =
            com.google.protobuf.Timestamp.newBuilder(expireAt_).mergeFrom(value).buildPartial();
        } else {
          expireAt_ = value;
        }
        onChanged();
      } else {
        expireAtBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     */
    public Builder clearExpireAt() {
      if (expireAtBuilder_ == null) {
        expireAt_ = null;
        onChanged();
      } else {
        expireAt_ = null;
        expireAtBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     */
    public com.google.protobuf.Timestamp.Builder getExpireAtBuilder() {
      
      onChanged();
      return getExpireAtFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getExpireAtOrBuilder() {
      if (expireAtBuilder_ != null) {
        return expireAtBuilder_.getMessageOrBuilder();
      } else {
        return expireAt_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : expireAt_;
      }
    }
    /**
     * <pre>
     * A time after which this content should stop being returned via
     * [FetchDirectory][build.bazel.remote.asset.v1.Fetch.FetchDirectory].
     * Servers *MAY* expire content early, e.g. due to storage pressure.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_at = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getExpireAtFieldBuilder() {
      if (expireAtBuilder_ == null) {
        expireAtBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getExpireAt(),
                getParentForChildren(),
                isClean());
        expireAt_ = null;
      }
      return expireAtBuilder_;
    }

    private build.bazel.remote.execution.v2.Digest rootDirectoryDigest_;
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> rootDirectoryDigestBuilder_;
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     * @return Whether the rootDirectoryDigest field is set.
     */
    public boolean hasRootDirectoryDigest() {
      return rootDirectoryDigestBuilder_ != null || rootDirectoryDigest_ != null;
    }
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     * @return The rootDirectoryDigest.
     */
    public build.bazel.remote.execution.v2.Digest getRootDirectoryDigest() {
      if (rootDirectoryDigestBuilder_ == null) {
        return rootDirectoryDigest_ == null ? build.bazel.remote.execution.v2.Digest.getDefaultInstance() : rootDirectoryDigest_;
      } else {
        return rootDirectoryDigestBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     */
    public Builder setRootDirectoryDigest(build.bazel.remote.execution.v2.Digest value) {
      if (rootDirectoryDigestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rootDirectoryDigest_ = value;
        onChanged();
      } else {
        rootDirectoryDigestBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     */
    public Builder setRootDirectoryDigest(
        build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (rootDirectoryDigestBuilder_ == null) {
        rootDirectoryDigest_ = builderForValue.build();
        onChanged();
      } else {
        rootDirectoryDigestBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     */
    public Builder mergeRootDirectoryDigest(build.bazel.remote.execution.v2.Digest value) {
      if (rootDirectoryDigestBuilder_ == null) {
        if (rootDirectoryDigest_ != null) {
          rootDirectoryDigest_ =
            build.bazel.remote.execution.v2.Digest.newBuilder(rootDirectoryDigest_).mergeFrom(value).buildPartial();
        } else {
          rootDirectoryDigest_ = value;
        }
        onChanged();
      } else {
        rootDirectoryDigestBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     */
    public Builder clearRootDirectoryDigest() {
      if (rootDirectoryDigestBuilder_ == null) {
        rootDirectoryDigest_ = null;
        onChanged();
      } else {
        rootDirectoryDigest_ = null;
        rootDirectoryDigestBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder getRootDirectoryDigestBuilder() {
      
      onChanged();
      return getRootDirectoryDigestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     */
    public build.bazel.remote.execution.v2.DigestOrBuilder getRootDirectoryDigestOrBuilder() {
      if (rootDirectoryDigestBuilder_ != null) {
        return rootDirectoryDigestBuilder_.getMessageOrBuilder();
      } else {
        return rootDirectoryDigest_ == null ?
            build.bazel.remote.execution.v2.Digest.getDefaultInstance() : rootDirectoryDigest_;
      }
    }
    /**
     * <pre>
     * Directory to associate
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest root_directory_digest = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> 
        getRootDirectoryDigestFieldBuilder() {
      if (rootDirectoryDigestBuilder_ == null) {
        rootDirectoryDigestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder>(
                getRootDirectoryDigest(),
                getParentForChildren(),
                isClean());
        rootDirectoryDigest_ = null;
      }
      return rootDirectoryDigestBuilder_;
    }

    private java.util.List<build.bazel.remote.execution.v2.Digest> referencesBlobs_ =
      java.util.Collections.emptyList();
    private void ensureReferencesBlobsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        referencesBlobs_ = new java.util.ArrayList<build.bazel.remote.execution.v2.Digest>(referencesBlobs_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> referencesBlobsBuilder_;

    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public java.util.List<build.bazel.remote.execution.v2.Digest> getReferencesBlobsList() {
      if (referencesBlobsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(referencesBlobs_);
      } else {
        return referencesBlobsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public int getReferencesBlobsCount() {
      if (referencesBlobsBuilder_ == null) {
        return referencesBlobs_.size();
      } else {
        return referencesBlobsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public build.bazel.remote.execution.v2.Digest getReferencesBlobs(int index) {
      if (referencesBlobsBuilder_ == null) {
        return referencesBlobs_.get(index);
      } else {
        return referencesBlobsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder setReferencesBlobs(
        int index, build.bazel.remote.execution.v2.Digest value) {
      if (referencesBlobsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesBlobsIsMutable();
        referencesBlobs_.set(index, value);
        onChanged();
      } else {
        referencesBlobsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder setReferencesBlobs(
        int index, build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (referencesBlobsBuilder_ == null) {
        ensureReferencesBlobsIsMutable();
        referencesBlobs_.set(index, builderForValue.build());
        onChanged();
      } else {
        referencesBlobsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder addReferencesBlobs(build.bazel.remote.execution.v2.Digest value) {
      if (referencesBlobsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesBlobsIsMutable();
        referencesBlobs_.add(value);
        onChanged();
      } else {
        referencesBlobsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder addReferencesBlobs(
        int index, build.bazel.remote.execution.v2.Digest value) {
      if (referencesBlobsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesBlobsIsMutable();
        referencesBlobs_.add(index, value);
        onChanged();
      } else {
        referencesBlobsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder addReferencesBlobs(
        build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (referencesBlobsBuilder_ == null) {
        ensureReferencesBlobsIsMutable();
        referencesBlobs_.add(builderForValue.build());
        onChanged();
      } else {
        referencesBlobsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder addReferencesBlobs(
        int index, build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (referencesBlobsBuilder_ == null) {
        ensureReferencesBlobsIsMutable();
        referencesBlobs_.add(index, builderForValue.build());
        onChanged();
      } else {
        referencesBlobsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder addAllReferencesBlobs(
        java.lang.Iterable<? extends build.bazel.remote.execution.v2.Digest> values) {
      if (referencesBlobsBuilder_ == null) {
        ensureReferencesBlobsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, referencesBlobs_);
        onChanged();
      } else {
        referencesBlobsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder clearReferencesBlobs() {
      if (referencesBlobsBuilder_ == null) {
        referencesBlobs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        referencesBlobsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public Builder removeReferencesBlobs(int index) {
      if (referencesBlobsBuilder_ == null) {
        ensureReferencesBlobsIsMutable();
        referencesBlobs_.remove(index);
        onChanged();
      } else {
        referencesBlobsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder getReferencesBlobsBuilder(
        int index) {
      return getReferencesBlobsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public build.bazel.remote.execution.v2.DigestOrBuilder getReferencesBlobsOrBuilder(
        int index) {
      if (referencesBlobsBuilder_ == null) {
        return referencesBlobs_.get(index);  } else {
        return referencesBlobsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public java.util.List<? extends build.bazel.remote.execution.v2.DigestOrBuilder> 
         getReferencesBlobsOrBuilderList() {
      if (referencesBlobsBuilder_ != null) {
        return referencesBlobsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(referencesBlobs_);
      }
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder addReferencesBlobsBuilder() {
      return getReferencesBlobsFieldBuilder().addBuilder(
          build.bazel.remote.execution.v2.Digest.getDefaultInstance());
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder addReferencesBlobsBuilder(
        int index) {
      return getReferencesBlobsFieldBuilder().addBuilder(
          index, build.bazel.remote.execution.v2.Digest.getDefaultInstance());
    }
    /**
     * <pre>
     * Referenced blobs or directories that need to not expire before expiration
     * of this association, in addition to `root_directory_digest` itself.
     * These fields are hints - clients *MAY* omit them, and servers *SHOULD*
     * respect them, at the risk of increased incidents of Fetch responses
     * indirectly referencing unavailable blobs.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_blobs = 6;</code>
     */
    public java.util.List<build.bazel.remote.execution.v2.Digest.Builder> 
         getReferencesBlobsBuilderList() {
      return getReferencesBlobsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> 
        getReferencesBlobsFieldBuilder() {
      if (referencesBlobsBuilder_ == null) {
        referencesBlobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder>(
                referencesBlobs_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        referencesBlobs_ = null;
      }
      return referencesBlobsBuilder_;
    }

    private java.util.List<build.bazel.remote.execution.v2.Digest> referencesDirectories_ =
      java.util.Collections.emptyList();
    private void ensureReferencesDirectoriesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        referencesDirectories_ = new java.util.ArrayList<build.bazel.remote.execution.v2.Digest>(referencesDirectories_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> referencesDirectoriesBuilder_;

    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public java.util.List<build.bazel.remote.execution.v2.Digest> getReferencesDirectoriesList() {
      if (referencesDirectoriesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(referencesDirectories_);
      } else {
        return referencesDirectoriesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public int getReferencesDirectoriesCount() {
      if (referencesDirectoriesBuilder_ == null) {
        return referencesDirectories_.size();
      } else {
        return referencesDirectoriesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public build.bazel.remote.execution.v2.Digest getReferencesDirectories(int index) {
      if (referencesDirectoriesBuilder_ == null) {
        return referencesDirectories_.get(index);
      } else {
        return referencesDirectoriesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder setReferencesDirectories(
        int index, build.bazel.remote.execution.v2.Digest value) {
      if (referencesDirectoriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesDirectoriesIsMutable();
        referencesDirectories_.set(index, value);
        onChanged();
      } else {
        referencesDirectoriesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder setReferencesDirectories(
        int index, build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (referencesDirectoriesBuilder_ == null) {
        ensureReferencesDirectoriesIsMutable();
        referencesDirectories_.set(index, builderForValue.build());
        onChanged();
      } else {
        referencesDirectoriesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder addReferencesDirectories(build.bazel.remote.execution.v2.Digest value) {
      if (referencesDirectoriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesDirectoriesIsMutable();
        referencesDirectories_.add(value);
        onChanged();
      } else {
        referencesDirectoriesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder addReferencesDirectories(
        int index, build.bazel.remote.execution.v2.Digest value) {
      if (referencesDirectoriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesDirectoriesIsMutable();
        referencesDirectories_.add(index, value);
        onChanged();
      } else {
        referencesDirectoriesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder addReferencesDirectories(
        build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (referencesDirectoriesBuilder_ == null) {
        ensureReferencesDirectoriesIsMutable();
        referencesDirectories_.add(builderForValue.build());
        onChanged();
      } else {
        referencesDirectoriesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder addReferencesDirectories(
        int index, build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (referencesDirectoriesBuilder_ == null) {
        ensureReferencesDirectoriesIsMutable();
        referencesDirectories_.add(index, builderForValue.build());
        onChanged();
      } else {
        referencesDirectoriesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder addAllReferencesDirectories(
        java.lang.Iterable<? extends build.bazel.remote.execution.v2.Digest> values) {
      if (referencesDirectoriesBuilder_ == null) {
        ensureReferencesDirectoriesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, referencesDirectories_);
        onChanged();
      } else {
        referencesDirectoriesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder clearReferencesDirectories() {
      if (referencesDirectoriesBuilder_ == null) {
        referencesDirectories_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        referencesDirectoriesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public Builder removeReferencesDirectories(int index) {
      if (referencesDirectoriesBuilder_ == null) {
        ensureReferencesDirectoriesIsMutable();
        referencesDirectories_.remove(index);
        onChanged();
      } else {
        referencesDirectoriesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder getReferencesDirectoriesBuilder(
        int index) {
      return getReferencesDirectoriesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public build.bazel.remote.execution.v2.DigestOrBuilder getReferencesDirectoriesOrBuilder(
        int index) {
      if (referencesDirectoriesBuilder_ == null) {
        return referencesDirectories_.get(index);  } else {
        return referencesDirectoriesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public java.util.List<? extends build.bazel.remote.execution.v2.DigestOrBuilder> 
         getReferencesDirectoriesOrBuilderList() {
      if (referencesDirectoriesBuilder_ != null) {
        return referencesDirectoriesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(referencesDirectories_);
      }
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder addReferencesDirectoriesBuilder() {
      return getReferencesDirectoriesFieldBuilder().addBuilder(
          build.bazel.remote.execution.v2.Digest.getDefaultInstance());
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder addReferencesDirectoriesBuilder(
        int index) {
      return getReferencesDirectoriesFieldBuilder().addBuilder(
          index, build.bazel.remote.execution.v2.Digest.getDefaultInstance());
    }
    /**
     * <code>repeated .build.bazel.remote.execution.v2.Digest references_directories = 7;</code>
     */
    public java.util.List<build.bazel.remote.execution.v2.Digest.Builder> 
         getReferencesDirectoriesBuilderList() {
      return getReferencesDirectoriesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> 
        getReferencesDirectoriesFieldBuilder() {
      if (referencesDirectoriesBuilder_ == null) {
        referencesDirectoriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder>(
                referencesDirectories_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        referencesDirectories_ = null;
      }
      return referencesDirectoriesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:build.bazel.remote.asset.v1.PushDirectoryRequest)
  }

  // @@protoc_insertion_point(class_scope:build.bazel.remote.asset.v1.PushDirectoryRequest)
  private static final build.bazel.remote.asset.v1.PushDirectoryRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new build.bazel.remote.asset.v1.PushDirectoryRequest();
  }

  public static build.bazel.remote.asset.v1.PushDirectoryRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PushDirectoryRequest>
      PARSER = new com.google.protobuf.AbstractParser<PushDirectoryRequest>() {
    @java.lang.Override
    public PushDirectoryRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PushDirectoryRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PushDirectoryRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PushDirectoryRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public build.bazel.remote.asset.v1.PushDirectoryRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

