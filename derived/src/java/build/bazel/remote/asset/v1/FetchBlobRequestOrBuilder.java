// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/asset/v1/remote_asset.proto

package build.bazel.remote.asset.v1;

public interface FetchBlobRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:build.bazel.remote.asset.v1.FetchBlobRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The instance of the execution system to operate against. A server may
   * support multiple instances of the execution system (with their own workers,
   * storage, caches, etc.). The server MAY require use of this field to select
   * between them in an implementation-defined fashion, otherwise it can be
   * omitted.
   * </pre>
   *
   * <code>string instance_name = 1;</code>
   * @return The instanceName.
   */
  java.lang.String getInstanceName();
  /**
   * <pre>
   * The instance of the execution system to operate against. A server may
   * support multiple instances of the execution system (with their own workers,
   * storage, caches, etc.). The server MAY require use of this field to select
   * between them in an implementation-defined fashion, otherwise it can be
   * omitted.
   * </pre>
   *
   * <code>string instance_name = 1;</code>
   * @return The bytes for instanceName.
   */
  com.google.protobuf.ByteString
      getInstanceNameBytes();

  /**
   * <pre>
   * The timeout for the underlying fetch, if content needs to be retrieved from
   * origin.
   * If unset, the server *MAY* apply an implementation-defined timeout.
   * If set, and the user-provided timeout exceeds the RPC deadline, the server
   * *SHOULD* keep the fetch going after the RPC completes, to be made
   * available for future Fetch calls. The server may also enforce (via clamping
   * and/or an INVALID_ARGUMENT error) implementation-defined minimum and
   * maximum timeout values.
   * If this timeout is exceeded on an attempt to retrieve content from origin
   * the client will receive DEADLINE_EXCEEDED in [FetchBlobResponse.status].
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2;</code>
   * @return Whether the timeout field is set.
   */
  boolean hasTimeout();
  /**
   * <pre>
   * The timeout for the underlying fetch, if content needs to be retrieved from
   * origin.
   * If unset, the server *MAY* apply an implementation-defined timeout.
   * If set, and the user-provided timeout exceeds the RPC deadline, the server
   * *SHOULD* keep the fetch going after the RPC completes, to be made
   * available for future Fetch calls. The server may also enforce (via clamping
   * and/or an INVALID_ARGUMENT error) implementation-defined minimum and
   * maximum timeout values.
   * If this timeout is exceeded on an attempt to retrieve content from origin
   * the client will receive DEADLINE_EXCEEDED in [FetchBlobResponse.status].
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2;</code>
   * @return The timeout.
   */
  com.google.protobuf.Duration getTimeout();
  /**
   * <pre>
   * The timeout for the underlying fetch, if content needs to be retrieved from
   * origin.
   * If unset, the server *MAY* apply an implementation-defined timeout.
   * If set, and the user-provided timeout exceeds the RPC deadline, the server
   * *SHOULD* keep the fetch going after the RPC completes, to be made
   * available for future Fetch calls. The server may also enforce (via clamping
   * and/or an INVALID_ARGUMENT error) implementation-defined minimum and
   * maximum timeout values.
   * If this timeout is exceeded on an attempt to retrieve content from origin
   * the client will receive DEADLINE_EXCEEDED in [FetchBlobResponse.status].
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2;</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

  /**
   * <pre>
   * The oldest content the client is willing to accept, as measured from the
   * time it was Push'd or when the underlying retrieval from origin was 
   * started.
   * Upon retries of Fetch requests that cannot be completed within a single
   * RPC, clients *SHOULD* provide the same value for subsequent requests as the
   * original, to simplify combining the request with the previous attempt.
   * If unset, the client *SHOULD* accept content of any age.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp oldest_content_accepted = 3;</code>
   * @return Whether the oldestContentAccepted field is set.
   */
  boolean hasOldestContentAccepted();
  /**
   * <pre>
   * The oldest content the client is willing to accept, as measured from the
   * time it was Push'd or when the underlying retrieval from origin was 
   * started.
   * Upon retries of Fetch requests that cannot be completed within a single
   * RPC, clients *SHOULD* provide the same value for subsequent requests as the
   * original, to simplify combining the request with the previous attempt.
   * If unset, the client *SHOULD* accept content of any age.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp oldest_content_accepted = 3;</code>
   * @return The oldestContentAccepted.
   */
  com.google.protobuf.Timestamp getOldestContentAccepted();
  /**
   * <pre>
   * The oldest content the client is willing to accept, as measured from the
   * time it was Push'd or when the underlying retrieval from origin was 
   * started.
   * Upon retries of Fetch requests that cannot be completed within a single
   * RPC, clients *SHOULD* provide the same value for subsequent requests as the
   * original, to simplify combining the request with the previous attempt.
   * If unset, the client *SHOULD* accept content of any age.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp oldest_content_accepted = 3;</code>
   */
  com.google.protobuf.TimestampOrBuilder getOldestContentAcceptedOrBuilder();

  /**
   * <pre>
   * The URI(s) of the content to fetch. These may be resources that the server
   * can directly fetch from origin, in which case multiple URIs *SHOULD*
   * represent the same content available at different locations (such as an
   * origin and secondary mirrors). These may also be URIs for content known to
   * the server through other mechanisms, e.g. pushed via the [Push][build.bazel.remote.asset.v1.Push]
   * service.
   * Clients *MUST* supply at least one URI. Servers *MAY* match any one of the
   * supplied URIs.
   * </pre>
   *
   * <code>repeated string uris = 4;</code>
   * @return A list containing the uris.
   */
  java.util.List<java.lang.String>
      getUrisList();
  /**
   * <pre>
   * The URI(s) of the content to fetch. These may be resources that the server
   * can directly fetch from origin, in which case multiple URIs *SHOULD*
   * represent the same content available at different locations (such as an
   * origin and secondary mirrors). These may also be URIs for content known to
   * the server through other mechanisms, e.g. pushed via the [Push][build.bazel.remote.asset.v1.Push]
   * service.
   * Clients *MUST* supply at least one URI. Servers *MAY* match any one of the
   * supplied URIs.
   * </pre>
   *
   * <code>repeated string uris = 4;</code>
   * @return The count of uris.
   */
  int getUrisCount();
  /**
   * <pre>
   * The URI(s) of the content to fetch. These may be resources that the server
   * can directly fetch from origin, in which case multiple URIs *SHOULD*
   * represent the same content available at different locations (such as an
   * origin and secondary mirrors). These may also be URIs for content known to
   * the server through other mechanisms, e.g. pushed via the [Push][build.bazel.remote.asset.v1.Push]
   * service.
   * Clients *MUST* supply at least one URI. Servers *MAY* match any one of the
   * supplied URIs.
   * </pre>
   *
   * <code>repeated string uris = 4;</code>
   * @param index The index of the element to return.
   * @return The uris at the given index.
   */
  java.lang.String getUris(int index);
  /**
   * <pre>
   * The URI(s) of the content to fetch. These may be resources that the server
   * can directly fetch from origin, in which case multiple URIs *SHOULD*
   * represent the same content available at different locations (such as an
   * origin and secondary mirrors). These may also be URIs for content known to
   * the server through other mechanisms, e.g. pushed via the [Push][build.bazel.remote.asset.v1.Push]
   * service.
   * Clients *MUST* supply at least one URI. Servers *MAY* match any one of the
   * supplied URIs.
   * </pre>
   *
   * <code>repeated string uris = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the uris at the given index.
   */
  com.google.protobuf.ByteString
      getUrisBytes(int index);

  /**
   * <pre>
   * Qualifiers sub-specifying the content to fetch - see comments on
   * [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * Specified qualifier names *MUST* be unique.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 5;</code>
   */
  java.util.List<build.bazel.remote.asset.v1.Qualifier> 
      getQualifiersList();
  /**
   * <pre>
   * Qualifiers sub-specifying the content to fetch - see comments on
   * [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * Specified qualifier names *MUST* be unique.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 5;</code>
   */
  build.bazel.remote.asset.v1.Qualifier getQualifiers(int index);
  /**
   * <pre>
   * Qualifiers sub-specifying the content to fetch - see comments on
   * [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * Specified qualifier names *MUST* be unique.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 5;</code>
   */
  int getQualifiersCount();
  /**
   * <pre>
   * Qualifiers sub-specifying the content to fetch - see comments on
   * [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * Specified qualifier names *MUST* be unique.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 5;</code>
   */
  java.util.List<? extends build.bazel.remote.asset.v1.QualifierOrBuilder> 
      getQualifiersOrBuilderList();
  /**
   * <pre>
   * Qualifiers sub-specifying the content to fetch - see comments on
   * [Qualifier][build.bazel.remote.asset.v1.Qualifier].
   * The same qualifiers apply to all URIs.
   * Specified qualifier names *MUST* be unique.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.asset.v1.Qualifier qualifiers = 5;</code>
   */
  build.bazel.remote.asset.v1.QualifierOrBuilder getQualifiersOrBuilder(
      int index);
}
