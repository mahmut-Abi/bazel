// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

public interface ActionResultOrBuilder extends
    // @@protoc_insertion_point(interface_extends:build.bazel.remote.execution.v2.ActionResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The output files of the action. For each output file requested in the
   * `output_files` or `output_paths` field of the Action, if the corresponding
   * file existed after the action completed, a single entry will be present
   * either in this field, or the `output_file_symlinks` field if the file was
   * a symbolic link to another file (`output_symlinks` field after v2.1).
   * If an output listed in `output_files` was found, but was a directory rather
   * than a regular file, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputFile output_files = 2;</code>
   */
  java.util.List<build.bazel.remote.execution.v2.OutputFile> 
      getOutputFilesList();
  /**
   * <pre>
   * The output files of the action. For each output file requested in the
   * `output_files` or `output_paths` field of the Action, if the corresponding
   * file existed after the action completed, a single entry will be present
   * either in this field, or the `output_file_symlinks` field if the file was
   * a symbolic link to another file (`output_symlinks` field after v2.1).
   * If an output listed in `output_files` was found, but was a directory rather
   * than a regular file, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputFile output_files = 2;</code>
   */
  build.bazel.remote.execution.v2.OutputFile getOutputFiles(int index);
  /**
   * <pre>
   * The output files of the action. For each output file requested in the
   * `output_files` or `output_paths` field of the Action, if the corresponding
   * file existed after the action completed, a single entry will be present
   * either in this field, or the `output_file_symlinks` field if the file was
   * a symbolic link to another file (`output_symlinks` field after v2.1).
   * If an output listed in `output_files` was found, but was a directory rather
   * than a regular file, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputFile output_files = 2;</code>
   */
  int getOutputFilesCount();
  /**
   * <pre>
   * The output files of the action. For each output file requested in the
   * `output_files` or `output_paths` field of the Action, if the corresponding
   * file existed after the action completed, a single entry will be present
   * either in this field, or the `output_file_symlinks` field if the file was
   * a symbolic link to another file (`output_symlinks` field after v2.1).
   * If an output listed in `output_files` was found, but was a directory rather
   * than a regular file, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputFile output_files = 2;</code>
   */
  java.util.List<? extends build.bazel.remote.execution.v2.OutputFileOrBuilder> 
      getOutputFilesOrBuilderList();
  /**
   * <pre>
   * The output files of the action. For each output file requested in the
   * `output_files` or `output_paths` field of the Action, if the corresponding
   * file existed after the action completed, a single entry will be present
   * either in this field, or the `output_file_symlinks` field if the file was
   * a symbolic link to another file (`output_symlinks` field after v2.1).
   * If an output listed in `output_files` was found, but was a directory rather
   * than a regular file, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputFile output_files = 2;</code>
   */
  build.bazel.remote.execution.v2.OutputFileOrBuilder getOutputFilesOrBuilder(
      int index);

  /**
   * <pre>
   * The output files of the action that are symbolic links to other files. Those
   * may be links to other output files, or input files, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output file requested in the `output_files` or `output_paths`
   * field of the Action, if the corresponding file existed after
   * the action completed, a single entry will be present either in this field,
   * or in the `output_files` field, if the file was not a symbolic link.
   * If an output symbolic link of the same name as listed in `output_files` of
   * the Command was found, but its target type was not a regular file, the
   * server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_file_symlinks = 10;</code>
   */
  java.util.List<build.bazel.remote.execution.v2.OutputSymlink> 
      getOutputFileSymlinksList();
  /**
   * <pre>
   * The output files of the action that are symbolic links to other files. Those
   * may be links to other output files, or input files, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output file requested in the `output_files` or `output_paths`
   * field of the Action, if the corresponding file existed after
   * the action completed, a single entry will be present either in this field,
   * or in the `output_files` field, if the file was not a symbolic link.
   * If an output symbolic link of the same name as listed in `output_files` of
   * the Command was found, but its target type was not a regular file, the
   * server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_file_symlinks = 10;</code>
   */
  build.bazel.remote.execution.v2.OutputSymlink getOutputFileSymlinks(int index);
  /**
   * <pre>
   * The output files of the action that are symbolic links to other files. Those
   * may be links to other output files, or input files, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output file requested in the `output_files` or `output_paths`
   * field of the Action, if the corresponding file existed after
   * the action completed, a single entry will be present either in this field,
   * or in the `output_files` field, if the file was not a symbolic link.
   * If an output symbolic link of the same name as listed in `output_files` of
   * the Command was found, but its target type was not a regular file, the
   * server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_file_symlinks = 10;</code>
   */
  int getOutputFileSymlinksCount();
  /**
   * <pre>
   * The output files of the action that are symbolic links to other files. Those
   * may be links to other output files, or input files, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output file requested in the `output_files` or `output_paths`
   * field of the Action, if the corresponding file existed after
   * the action completed, a single entry will be present either in this field,
   * or in the `output_files` field, if the file was not a symbolic link.
   * If an output symbolic link of the same name as listed in `output_files` of
   * the Command was found, but its target type was not a regular file, the
   * server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_file_symlinks = 10;</code>
   */
  java.util.List<? extends build.bazel.remote.execution.v2.OutputSymlinkOrBuilder> 
      getOutputFileSymlinksOrBuilderList();
  /**
   * <pre>
   * The output files of the action that are symbolic links to other files. Those
   * may be links to other output files, or input files, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output file requested in the `output_files` or `output_paths`
   * field of the Action, if the corresponding file existed after
   * the action completed, a single entry will be present either in this field,
   * or in the `output_files` field, if the file was not a symbolic link.
   * If an output symbolic link of the same name as listed in `output_files` of
   * the Command was found, but its target type was not a regular file, the
   * server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_file_symlinks = 10;</code>
   */
  build.bazel.remote.execution.v2.OutputSymlinkOrBuilder getOutputFileSymlinksOrBuilder(
      int index);

  /**
   * <pre>
   * New in v2.1: this field will only be populated if the command
   * `output_paths` field was used, and not the pre v2.1 `output_files` or
   * `output_directories` fields.
   * The output paths of the action that are symbolic links to other paths. Those
   * may be links to other outputs, or inputs, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * A single entry for each output requested in `output_paths`
   * field of the Action, if the corresponding path existed after
   * the action completed and was a symbolic link.
   * If the action does not produce a requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_symlinks = 12;</code>
   */
  java.util.List<build.bazel.remote.execution.v2.OutputSymlink> 
      getOutputSymlinksList();
  /**
   * <pre>
   * New in v2.1: this field will only be populated if the command
   * `output_paths` field was used, and not the pre v2.1 `output_files` or
   * `output_directories` fields.
   * The output paths of the action that are symbolic links to other paths. Those
   * may be links to other outputs, or inputs, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * A single entry for each output requested in `output_paths`
   * field of the Action, if the corresponding path existed after
   * the action completed and was a symbolic link.
   * If the action does not produce a requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_symlinks = 12;</code>
   */
  build.bazel.remote.execution.v2.OutputSymlink getOutputSymlinks(int index);
  /**
   * <pre>
   * New in v2.1: this field will only be populated if the command
   * `output_paths` field was used, and not the pre v2.1 `output_files` or
   * `output_directories` fields.
   * The output paths of the action that are symbolic links to other paths. Those
   * may be links to other outputs, or inputs, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * A single entry for each output requested in `output_paths`
   * field of the Action, if the corresponding path existed after
   * the action completed and was a symbolic link.
   * If the action does not produce a requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_symlinks = 12;</code>
   */
  int getOutputSymlinksCount();
  /**
   * <pre>
   * New in v2.1: this field will only be populated if the command
   * `output_paths` field was used, and not the pre v2.1 `output_files` or
   * `output_directories` fields.
   * The output paths of the action that are symbolic links to other paths. Those
   * may be links to other outputs, or inputs, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * A single entry for each output requested in `output_paths`
   * field of the Action, if the corresponding path existed after
   * the action completed and was a symbolic link.
   * If the action does not produce a requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_symlinks = 12;</code>
   */
  java.util.List<? extends build.bazel.remote.execution.v2.OutputSymlinkOrBuilder> 
      getOutputSymlinksOrBuilderList();
  /**
   * <pre>
   * New in v2.1: this field will only be populated if the command
   * `output_paths` field was used, and not the pre v2.1 `output_files` or
   * `output_directories` fields.
   * The output paths of the action that are symbolic links to other paths. Those
   * may be links to other outputs, or inputs, or even absolute paths
   * outside of the working directory, if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * A single entry for each output requested in `output_paths`
   * field of the Action, if the corresponding path existed after
   * the action completed and was a symbolic link.
   * If the action does not produce a requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_symlinks = 12;</code>
   */
  build.bazel.remote.execution.v2.OutputSymlinkOrBuilder getOutputSymlinksOrBuilder(
      int index);

  /**
   * <pre>
   * The output directories of the action. For each output directory requested
   * in the `output_directories` or `output_paths` field of the Action, if the
   * corresponding directory existed after the action completed, a single entry
   * will be present in the output list, which will contain the digest of a
   * [Tree][build.bazel.remote.execution.v2.Tree] message containing the
   * directory tree, and the path equal exactly to the corresponding Action
   * output_directories member.
   * As an example, suppose the Action had an output directory `a/b/dir` and the
   * execution produced the following contents in `a/b/dir`: a file named `bar`
   * and a directory named `foo` with an executable file named `baz`. Then,
   * output_directory will contain (hashes shortened for readability):
   * ```json
   * // OutputDirectory proto:
   * {
   *   path: "a/b/dir"
   *   tree_digest: {
   *     hash: "4a73bc9d03...",
   *     size: 55
   *   }
   * }
   * // Tree proto with hash "4a73bc9d03..." and size 55:
   * {
   *   root: {
   *     files: [
   *       {
   *         name: "bar",
   *         digest: {
   *           hash: "4a73bc9d03...",
   *           size: 65534
   *         }
   *       }
   *     ],
   *     directories: [
   *       {
   *         name: "foo",
   *         digest: {
   *           hash: "4cf2eda940...",
   *           size: 43
   *         }
   *       }
   *     ]
   *   }
   *   children : {
   *     // (Directory proto with hash "4cf2eda940..." and size 43)
   *     files: [
   *       {
   *         name: "baz",
   *         digest: {
   *           hash: "b2c941073e...",
   *           size: 1294,
   *         },
   *         is_executable: true
   *       }
   *     ]
   *   }
   * }
   * ```
   * If an output of the same name as listed in `output_files` of
   * the Command was found in `output_directories`, but was not a directory, the
   * server will return a FAILED_PRECONDITION.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputDirectory output_directories = 3;</code>
   */
  java.util.List<build.bazel.remote.execution.v2.OutputDirectory> 
      getOutputDirectoriesList();
  /**
   * <pre>
   * The output directories of the action. For each output directory requested
   * in the `output_directories` or `output_paths` field of the Action, if the
   * corresponding directory existed after the action completed, a single entry
   * will be present in the output list, which will contain the digest of a
   * [Tree][build.bazel.remote.execution.v2.Tree] message containing the
   * directory tree, and the path equal exactly to the corresponding Action
   * output_directories member.
   * As an example, suppose the Action had an output directory `a/b/dir` and the
   * execution produced the following contents in `a/b/dir`: a file named `bar`
   * and a directory named `foo` with an executable file named `baz`. Then,
   * output_directory will contain (hashes shortened for readability):
   * ```json
   * // OutputDirectory proto:
   * {
   *   path: "a/b/dir"
   *   tree_digest: {
   *     hash: "4a73bc9d03...",
   *     size: 55
   *   }
   * }
   * // Tree proto with hash "4a73bc9d03..." and size 55:
   * {
   *   root: {
   *     files: [
   *       {
   *         name: "bar",
   *         digest: {
   *           hash: "4a73bc9d03...",
   *           size: 65534
   *         }
   *       }
   *     ],
   *     directories: [
   *       {
   *         name: "foo",
   *         digest: {
   *           hash: "4cf2eda940...",
   *           size: 43
   *         }
   *       }
   *     ]
   *   }
   *   children : {
   *     // (Directory proto with hash "4cf2eda940..." and size 43)
   *     files: [
   *       {
   *         name: "baz",
   *         digest: {
   *           hash: "b2c941073e...",
   *           size: 1294,
   *         },
   *         is_executable: true
   *       }
   *     ]
   *   }
   * }
   * ```
   * If an output of the same name as listed in `output_files` of
   * the Command was found in `output_directories`, but was not a directory, the
   * server will return a FAILED_PRECONDITION.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputDirectory output_directories = 3;</code>
   */
  build.bazel.remote.execution.v2.OutputDirectory getOutputDirectories(int index);
  /**
   * <pre>
   * The output directories of the action. For each output directory requested
   * in the `output_directories` or `output_paths` field of the Action, if the
   * corresponding directory existed after the action completed, a single entry
   * will be present in the output list, which will contain the digest of a
   * [Tree][build.bazel.remote.execution.v2.Tree] message containing the
   * directory tree, and the path equal exactly to the corresponding Action
   * output_directories member.
   * As an example, suppose the Action had an output directory `a/b/dir` and the
   * execution produced the following contents in `a/b/dir`: a file named `bar`
   * and a directory named `foo` with an executable file named `baz`. Then,
   * output_directory will contain (hashes shortened for readability):
   * ```json
   * // OutputDirectory proto:
   * {
   *   path: "a/b/dir"
   *   tree_digest: {
   *     hash: "4a73bc9d03...",
   *     size: 55
   *   }
   * }
   * // Tree proto with hash "4a73bc9d03..." and size 55:
   * {
   *   root: {
   *     files: [
   *       {
   *         name: "bar",
   *         digest: {
   *           hash: "4a73bc9d03...",
   *           size: 65534
   *         }
   *       }
   *     ],
   *     directories: [
   *       {
   *         name: "foo",
   *         digest: {
   *           hash: "4cf2eda940...",
   *           size: 43
   *         }
   *       }
   *     ]
   *   }
   *   children : {
   *     // (Directory proto with hash "4cf2eda940..." and size 43)
   *     files: [
   *       {
   *         name: "baz",
   *         digest: {
   *           hash: "b2c941073e...",
   *           size: 1294,
   *         },
   *         is_executable: true
   *       }
   *     ]
   *   }
   * }
   * ```
   * If an output of the same name as listed in `output_files` of
   * the Command was found in `output_directories`, but was not a directory, the
   * server will return a FAILED_PRECONDITION.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputDirectory output_directories = 3;</code>
   */
  int getOutputDirectoriesCount();
  /**
   * <pre>
   * The output directories of the action. For each output directory requested
   * in the `output_directories` or `output_paths` field of the Action, if the
   * corresponding directory existed after the action completed, a single entry
   * will be present in the output list, which will contain the digest of a
   * [Tree][build.bazel.remote.execution.v2.Tree] message containing the
   * directory tree, and the path equal exactly to the corresponding Action
   * output_directories member.
   * As an example, suppose the Action had an output directory `a/b/dir` and the
   * execution produced the following contents in `a/b/dir`: a file named `bar`
   * and a directory named `foo` with an executable file named `baz`. Then,
   * output_directory will contain (hashes shortened for readability):
   * ```json
   * // OutputDirectory proto:
   * {
   *   path: "a/b/dir"
   *   tree_digest: {
   *     hash: "4a73bc9d03...",
   *     size: 55
   *   }
   * }
   * // Tree proto with hash "4a73bc9d03..." and size 55:
   * {
   *   root: {
   *     files: [
   *       {
   *         name: "bar",
   *         digest: {
   *           hash: "4a73bc9d03...",
   *           size: 65534
   *         }
   *       }
   *     ],
   *     directories: [
   *       {
   *         name: "foo",
   *         digest: {
   *           hash: "4cf2eda940...",
   *           size: 43
   *         }
   *       }
   *     ]
   *   }
   *   children : {
   *     // (Directory proto with hash "4cf2eda940..." and size 43)
   *     files: [
   *       {
   *         name: "baz",
   *         digest: {
   *           hash: "b2c941073e...",
   *           size: 1294,
   *         },
   *         is_executable: true
   *       }
   *     ]
   *   }
   * }
   * ```
   * If an output of the same name as listed in `output_files` of
   * the Command was found in `output_directories`, but was not a directory, the
   * server will return a FAILED_PRECONDITION.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputDirectory output_directories = 3;</code>
   */
  java.util.List<? extends build.bazel.remote.execution.v2.OutputDirectoryOrBuilder> 
      getOutputDirectoriesOrBuilderList();
  /**
   * <pre>
   * The output directories of the action. For each output directory requested
   * in the `output_directories` or `output_paths` field of the Action, if the
   * corresponding directory existed after the action completed, a single entry
   * will be present in the output list, which will contain the digest of a
   * [Tree][build.bazel.remote.execution.v2.Tree] message containing the
   * directory tree, and the path equal exactly to the corresponding Action
   * output_directories member.
   * As an example, suppose the Action had an output directory `a/b/dir` and the
   * execution produced the following contents in `a/b/dir`: a file named `bar`
   * and a directory named `foo` with an executable file named `baz`. Then,
   * output_directory will contain (hashes shortened for readability):
   * ```json
   * // OutputDirectory proto:
   * {
   *   path: "a/b/dir"
   *   tree_digest: {
   *     hash: "4a73bc9d03...",
   *     size: 55
   *   }
   * }
   * // Tree proto with hash "4a73bc9d03..." and size 55:
   * {
   *   root: {
   *     files: [
   *       {
   *         name: "bar",
   *         digest: {
   *           hash: "4a73bc9d03...",
   *           size: 65534
   *         }
   *       }
   *     ],
   *     directories: [
   *       {
   *         name: "foo",
   *         digest: {
   *           hash: "4cf2eda940...",
   *           size: 43
   *         }
   *       }
   *     ]
   *   }
   *   children : {
   *     // (Directory proto with hash "4cf2eda940..." and size 43)
   *     files: [
   *       {
   *         name: "baz",
   *         digest: {
   *           hash: "b2c941073e...",
   *           size: 1294,
   *         },
   *         is_executable: true
   *       }
   *     ]
   *   }
   * }
   * ```
   * If an output of the same name as listed in `output_files` of
   * the Command was found in `output_directories`, but was not a directory, the
   * server will return a FAILED_PRECONDITION.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputDirectory output_directories = 3;</code>
   */
  build.bazel.remote.execution.v2.OutputDirectoryOrBuilder getOutputDirectoriesOrBuilder(
      int index);

  /**
   * <pre>
   * The output directories of the action that are symbolic links to other
   * directories. Those may be links to other output directories, or input
   * directories, or even absolute paths outside of the working directory,
   * if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output directory requested in the `output_directories` field of
   * the Action, if the directory existed after the action completed, a
   * single entry will be present either in this field, or in the
   * `output_directories` field, if the directory was not a symbolic link.
   * If an output of the same name was found, but was a symbolic link to a file
   * instead of a directory, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_directory_symlinks = 11;</code>
   */
  java.util.List<build.bazel.remote.execution.v2.OutputSymlink> 
      getOutputDirectorySymlinksList();
  /**
   * <pre>
   * The output directories of the action that are symbolic links to other
   * directories. Those may be links to other output directories, or input
   * directories, or even absolute paths outside of the working directory,
   * if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output directory requested in the `output_directories` field of
   * the Action, if the directory existed after the action completed, a
   * single entry will be present either in this field, or in the
   * `output_directories` field, if the directory was not a symbolic link.
   * If an output of the same name was found, but was a symbolic link to a file
   * instead of a directory, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_directory_symlinks = 11;</code>
   */
  build.bazel.remote.execution.v2.OutputSymlink getOutputDirectorySymlinks(int index);
  /**
   * <pre>
   * The output directories of the action that are symbolic links to other
   * directories. Those may be links to other output directories, or input
   * directories, or even absolute paths outside of the working directory,
   * if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output directory requested in the `output_directories` field of
   * the Action, if the directory existed after the action completed, a
   * single entry will be present either in this field, or in the
   * `output_directories` field, if the directory was not a symbolic link.
   * If an output of the same name was found, but was a symbolic link to a file
   * instead of a directory, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_directory_symlinks = 11;</code>
   */
  int getOutputDirectorySymlinksCount();
  /**
   * <pre>
   * The output directories of the action that are symbolic links to other
   * directories. Those may be links to other output directories, or input
   * directories, or even absolute paths outside of the working directory,
   * if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output directory requested in the `output_directories` field of
   * the Action, if the directory existed after the action completed, a
   * single entry will be present either in this field, or in the
   * `output_directories` field, if the directory was not a symbolic link.
   * If an output of the same name was found, but was a symbolic link to a file
   * instead of a directory, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_directory_symlinks = 11;</code>
   */
  java.util.List<? extends build.bazel.remote.execution.v2.OutputSymlinkOrBuilder> 
      getOutputDirectorySymlinksOrBuilderList();
  /**
   * <pre>
   * The output directories of the action that are symbolic links to other
   * directories. Those may be links to other output directories, or input
   * directories, or even absolute paths outside of the working directory,
   * if the server supports
   * [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
   * For each output directory requested in the `output_directories` field of
   * the Action, if the directory existed after the action completed, a
   * single entry will be present either in this field, or in the
   * `output_directories` field, if the directory was not a symbolic link.
   * If an output of the same name was found, but was a symbolic link to a file
   * instead of a directory, the server will return a FAILED_PRECONDITION.
   * If the action does not produce the requested output, then that output
   * will be omitted from the list. The server is free to arrange the output
   * list as desired; clients MUST NOT assume that the output list is sorted.
   * DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
   * should still populate this field in addition to `output_symlinks`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.OutputSymlink output_directory_symlinks = 11;</code>
   */
  build.bazel.remote.execution.v2.OutputSymlinkOrBuilder getOutputDirectorySymlinksOrBuilder(
      int index);

  /**
   * <pre>
   * The exit code of the command.
   * </pre>
   *
   * <code>int32 exit_code = 4;</code>
   * @return The exitCode.
   */
  int getExitCode();

  /**
   * <pre>
   * The standard output buffer of the action. The server SHOULD NOT inline
   * stdout unless requested by the client in the
   * [GetActionResultRequest][build.bazel.remote.execution.v2.GetActionResultRequest]
   * message. The server MAY omit inlining, even if requested, and MUST do so if inlining
   * would cause the response to exceed message size limits.
   * </pre>
   *
   * <code>bytes stdout_raw = 5;</code>
   * @return The stdoutRaw.
   */
  com.google.protobuf.ByteString getStdoutRaw();

  /**
   * <pre>
   * The digest for a blob containing the standard output of the action, which
   * can be retrieved from the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest stdout_digest = 6;</code>
   * @return Whether the stdoutDigest field is set.
   */
  boolean hasStdoutDigest();
  /**
   * <pre>
   * The digest for a blob containing the standard output of the action, which
   * can be retrieved from the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest stdout_digest = 6;</code>
   * @return The stdoutDigest.
   */
  build.bazel.remote.execution.v2.Digest getStdoutDigest();
  /**
   * <pre>
   * The digest for a blob containing the standard output of the action, which
   * can be retrieved from the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest stdout_digest = 6;</code>
   */
  build.bazel.remote.execution.v2.DigestOrBuilder getStdoutDigestOrBuilder();

  /**
   * <pre>
   * The standard error buffer of the action. The server SHOULD NOT inline
   * stderr unless requested by the client in the
   * [GetActionResultRequest][build.bazel.remote.execution.v2.GetActionResultRequest]
   * message. The server MAY omit inlining, even if requested, and MUST do so if inlining
   * would cause the response to exceed message size limits.
   * </pre>
   *
   * <code>bytes stderr_raw = 7;</code>
   * @return The stderrRaw.
   */
  com.google.protobuf.ByteString getStderrRaw();

  /**
   * <pre>
   * The digest for a blob containing the standard error of the action, which
   * can be retrieved from the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest stderr_digest = 8;</code>
   * @return Whether the stderrDigest field is set.
   */
  boolean hasStderrDigest();
  /**
   * <pre>
   * The digest for a blob containing the standard error of the action, which
   * can be retrieved from the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest stderr_digest = 8;</code>
   * @return The stderrDigest.
   */
  build.bazel.remote.execution.v2.Digest getStderrDigest();
  /**
   * <pre>
   * The digest for a blob containing the standard error of the action, which
   * can be retrieved from the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest stderr_digest = 8;</code>
   */
  build.bazel.remote.execution.v2.DigestOrBuilder getStderrDigestOrBuilder();

  /**
   * <pre>
   * The details of the execution that originally produced this result.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ExecutedActionMetadata execution_metadata = 9;</code>
   * @return Whether the executionMetadata field is set.
   */
  boolean hasExecutionMetadata();
  /**
   * <pre>
   * The details of the execution that originally produced this result.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ExecutedActionMetadata execution_metadata = 9;</code>
   * @return The executionMetadata.
   */
  build.bazel.remote.execution.v2.ExecutedActionMetadata getExecutionMetadata();
  /**
   * <pre>
   * The details of the execution that originally produced this result.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ExecutedActionMetadata execution_metadata = 9;</code>
   */
  build.bazel.remote.execution.v2.ExecutedActionMetadataOrBuilder getExecutionMetadataOrBuilder();
}
