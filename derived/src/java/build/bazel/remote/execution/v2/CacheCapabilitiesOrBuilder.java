// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

public interface CacheCapabilitiesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:build.bazel.remote.execution.v2.CacheCapabilities)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * All the digest functions supported by the remote cache.
   * Remote cache may support multiple digest functions simultaneously.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DigestFunction.Value digest_functions = 1;</code>
   * @return A list containing the digestFunctions.
   */
  java.util.List<build.bazel.remote.execution.v2.DigestFunction.Value> getDigestFunctionsList();
  /**
   * <pre>
   * All the digest functions supported by the remote cache.
   * Remote cache may support multiple digest functions simultaneously.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DigestFunction.Value digest_functions = 1;</code>
   * @return The count of digestFunctions.
   */
  int getDigestFunctionsCount();
  /**
   * <pre>
   * All the digest functions supported by the remote cache.
   * Remote cache may support multiple digest functions simultaneously.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DigestFunction.Value digest_functions = 1;</code>
   * @param index The index of the element to return.
   * @return The digestFunctions at the given index.
   */
  build.bazel.remote.execution.v2.DigestFunction.Value getDigestFunctions(int index);
  /**
   * <pre>
   * All the digest functions supported by the remote cache.
   * Remote cache may support multiple digest functions simultaneously.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DigestFunction.Value digest_functions = 1;</code>
   * @return A list containing the enum numeric values on the wire for digestFunctions.
   */
  java.util.List<java.lang.Integer>
  getDigestFunctionsValueList();
  /**
   * <pre>
   * All the digest functions supported by the remote cache.
   * Remote cache may support multiple digest functions simultaneously.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DigestFunction.Value digest_functions = 1;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of digestFunctions at the given index.
   */
  int getDigestFunctionsValue(int index);

  /**
   * <pre>
   * Capabilities for updating the action cache.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities action_cache_update_capabilities = 2;</code>
   * @return Whether the actionCacheUpdateCapabilities field is set.
   */
  boolean hasActionCacheUpdateCapabilities();
  /**
   * <pre>
   * Capabilities for updating the action cache.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities action_cache_update_capabilities = 2;</code>
   * @return The actionCacheUpdateCapabilities.
   */
  build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities getActionCacheUpdateCapabilities();
  /**
   * <pre>
   * Capabilities for updating the action cache.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities action_cache_update_capabilities = 2;</code>
   */
  build.bazel.remote.execution.v2.ActionCacheUpdateCapabilitiesOrBuilder getActionCacheUpdateCapabilitiesOrBuilder();

  /**
   * <pre>
   * Supported cache priority range for both CAS and ActionCache.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.PriorityCapabilities cache_priority_capabilities = 3;</code>
   * @return Whether the cachePriorityCapabilities field is set.
   */
  boolean hasCachePriorityCapabilities();
  /**
   * <pre>
   * Supported cache priority range for both CAS and ActionCache.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.PriorityCapabilities cache_priority_capabilities = 3;</code>
   * @return The cachePriorityCapabilities.
   */
  build.bazel.remote.execution.v2.PriorityCapabilities getCachePriorityCapabilities();
  /**
   * <pre>
   * Supported cache priority range for both CAS and ActionCache.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.PriorityCapabilities cache_priority_capabilities = 3;</code>
   */
  build.bazel.remote.execution.v2.PriorityCapabilitiesOrBuilder getCachePriorityCapabilitiesOrBuilder();

  /**
   * <pre>
   * Maximum total size of blobs to be uploaded/downloaded using
   * batch methods. A value of 0 means no limit is set, although
   * in practice there will always be a message size limitation
   * of the protocol in use, e.g. GRPC.
   * </pre>
   *
   * <code>int64 max_batch_total_size_bytes = 4;</code>
   * @return The maxBatchTotalSizeBytes.
   */
  long getMaxBatchTotalSizeBytes();

  /**
   * <pre>
   * Whether absolute symlink targets are supported.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.SymlinkAbsolutePathStrategy.Value symlink_absolute_path_strategy = 5;</code>
   * @return The enum numeric value on the wire for symlinkAbsolutePathStrategy.
   */
  int getSymlinkAbsolutePathStrategyValue();
  /**
   * <pre>
   * Whether absolute symlink targets are supported.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.SymlinkAbsolutePathStrategy.Value symlink_absolute_path_strategy = 5;</code>
   * @return The symlinkAbsolutePathStrategy.
   */
  build.bazel.remote.execution.v2.SymlinkAbsolutePathStrategy.Value getSymlinkAbsolutePathStrategy();

  /**
   * <pre>
   * Compressors supported by the "compressed-blobs" bytestream resources.
   * Servers MUST support identity/no-compression, even if it is not listed
   * here.
   * Note that this does not imply which if any compressors are supported by
   * the server at the gRPC level.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Compressor.Value supported_compressors = 6;</code>
   * @return A list containing the supportedCompressors.
   */
  java.util.List<build.bazel.remote.execution.v2.Compressor.Value> getSupportedCompressorsList();
  /**
   * <pre>
   * Compressors supported by the "compressed-blobs" bytestream resources.
   * Servers MUST support identity/no-compression, even if it is not listed
   * here.
   * Note that this does not imply which if any compressors are supported by
   * the server at the gRPC level.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Compressor.Value supported_compressors = 6;</code>
   * @return The count of supportedCompressors.
   */
  int getSupportedCompressorsCount();
  /**
   * <pre>
   * Compressors supported by the "compressed-blobs" bytestream resources.
   * Servers MUST support identity/no-compression, even if it is not listed
   * here.
   * Note that this does not imply which if any compressors are supported by
   * the server at the gRPC level.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Compressor.Value supported_compressors = 6;</code>
   * @param index The index of the element to return.
   * @return The supportedCompressors at the given index.
   */
  build.bazel.remote.execution.v2.Compressor.Value getSupportedCompressors(int index);
  /**
   * <pre>
   * Compressors supported by the "compressed-blobs" bytestream resources.
   * Servers MUST support identity/no-compression, even if it is not listed
   * here.
   * Note that this does not imply which if any compressors are supported by
   * the server at the gRPC level.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Compressor.Value supported_compressors = 6;</code>
   * @return A list containing the enum numeric values on the wire for supportedCompressors.
   */
  java.util.List<java.lang.Integer>
  getSupportedCompressorsValueList();
  /**
   * <pre>
   * Compressors supported by the "compressed-blobs" bytestream resources.
   * Servers MUST support identity/no-compression, even if it is not listed
   * here.
   * Note that this does not imply which if any compressors are supported by
   * the server at the gRPC level.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Compressor.Value supported_compressors = 6;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of supportedCompressors at the given index.
   */
  int getSupportedCompressorsValue(int index);
}
