// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

/**
 * <pre>
 * An `OutputFile` is similar to a
 * [FileNode][build.bazel.remote.execution.v2.FileNode], but it is used as an
 * output in an `ActionResult`. It allows a full file path rather than
 * only a name.
 * </pre>
 *
 * Protobuf type {@code build.bazel.remote.execution.v2.OutputFile}
 */
public final class OutputFile extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:build.bazel.remote.execution.v2.OutputFile)
    OutputFileOrBuilder {
private static final long serialVersionUID = 0L;
  // Use OutputFile.newBuilder() to construct.
  private OutputFile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private OutputFile() {
    path_ = "";
    contents_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new OutputFile();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private OutputFile(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            path_ = s;
            break;
          }
          case 18: {
            build.bazel.remote.execution.v2.Digest.Builder subBuilder = null;
            if (digest_ != null) {
              subBuilder = digest_.toBuilder();
            }
            digest_ = input.readMessage(build.bazel.remote.execution.v2.Digest.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(digest_);
              digest_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {

            isExecutable_ = input.readBool();
            break;
          }
          case 42: {

            contents_ = input.readBytes();
            break;
          }
          case 58: {
            build.bazel.remote.execution.v2.NodeProperties.Builder subBuilder = null;
            if (nodeProperties_ != null) {
              subBuilder = nodeProperties_.toBuilder();
            }
            nodeProperties_ = input.readMessage(build.bazel.remote.execution.v2.NodeProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(nodeProperties_);
              nodeProperties_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputFile_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputFile_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            build.bazel.remote.execution.v2.OutputFile.class, build.bazel.remote.execution.v2.OutputFile.Builder.class);
  }

  public static final int PATH_FIELD_NUMBER = 1;
  private volatile java.lang.Object path_;
  /**
   * <pre>
   * The full path of the file relative to the working directory, including the
   * filename. The path separator is a forward slash `/`. Since this is a
   * relative path, it MUST NOT begin with a leading forward slash.
   * </pre>
   *
   * <code>string path = 1;</code>
   * @return The path.
   */
  @java.lang.Override
  public java.lang.String getPath() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      path_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The full path of the file relative to the working directory, including the
   * filename. The path separator is a forward slash `/`. Since this is a
   * relative path, it MUST NOT begin with a leading forward slash.
   * </pre>
   *
   * <code>string path = 1;</code>
   * @return The bytes for path.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPathBytes() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      path_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DIGEST_FIELD_NUMBER = 2;
  private build.bazel.remote.execution.v2.Digest digest_;
  /**
   * <pre>
   * The digest of the file's content.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
   * @return Whether the digest field is set.
   */
  @java.lang.Override
  public boolean hasDigest() {
    return digest_ != null;
  }
  /**
   * <pre>
   * The digest of the file's content.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
   * @return The digest.
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.Digest getDigest() {
    return digest_ == null ? build.bazel.remote.execution.v2.Digest.getDefaultInstance() : digest_;
  }
  /**
   * <pre>
   * The digest of the file's content.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.DigestOrBuilder getDigestOrBuilder() {
    return getDigest();
  }

  public static final int IS_EXECUTABLE_FIELD_NUMBER = 4;
  private boolean isExecutable_;
  /**
   * <pre>
   * True if file is executable, false otherwise.
   * </pre>
   *
   * <code>bool is_executable = 4;</code>
   * @return The isExecutable.
   */
  @java.lang.Override
  public boolean getIsExecutable() {
    return isExecutable_;
  }

  public static final int CONTENTS_FIELD_NUMBER = 5;
  private com.google.protobuf.ByteString contents_;
  /**
   * <pre>
   * The contents of the file if inlining was requested. The server SHOULD NOT inline
   * file contents unless requested by the client in the
   * [GetActionResultRequest][build.bazel.remote.execution.v2.GetActionResultRequest]
   * message. The server MAY omit inlining, even if requested, and MUST do so if inlining
   * would cause the response to exceed message size limits.
   * </pre>
   *
   * <code>bytes contents = 5;</code>
   * @return The contents.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getContents() {
    return contents_;
  }

  public static final int NODE_PROPERTIES_FIELD_NUMBER = 7;
  private build.bazel.remote.execution.v2.NodeProperties nodeProperties_;
  /**
   * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
   * @return Whether the nodeProperties field is set.
   */
  @java.lang.Override
  public boolean hasNodeProperties() {
    return nodeProperties_ != null;
  }
  /**
   * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
   * @return The nodeProperties.
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.NodeProperties getNodeProperties() {
    return nodeProperties_ == null ? build.bazel.remote.execution.v2.NodeProperties.getDefaultInstance() : nodeProperties_;
  }
  /**
   * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
   */
  @java.lang.Override
  public build.bazel.remote.execution.v2.NodePropertiesOrBuilder getNodePropertiesOrBuilder() {
    return getNodeProperties();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getPathBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, path_);
    }
    if (digest_ != null) {
      output.writeMessage(2, getDigest());
    }
    if (isExecutable_ != false) {
      output.writeBool(4, isExecutable_);
    }
    if (!contents_.isEmpty()) {
      output.writeBytes(5, contents_);
    }
    if (nodeProperties_ != null) {
      output.writeMessage(7, getNodeProperties());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getPathBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, path_);
    }
    if (digest_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getDigest());
    }
    if (isExecutable_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, isExecutable_);
    }
    if (!contents_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(5, contents_);
    }
    if (nodeProperties_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getNodeProperties());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof build.bazel.remote.execution.v2.OutputFile)) {
      return super.equals(obj);
    }
    build.bazel.remote.execution.v2.OutputFile other = (build.bazel.remote.execution.v2.OutputFile) obj;

    if (!getPath()
        .equals(other.getPath())) return false;
    if (hasDigest() != other.hasDigest()) return false;
    if (hasDigest()) {
      if (!getDigest()
          .equals(other.getDigest())) return false;
    }
    if (getIsExecutable()
        != other.getIsExecutable()) return false;
    if (!getContents()
        .equals(other.getContents())) return false;
    if (hasNodeProperties() != other.hasNodeProperties()) return false;
    if (hasNodeProperties()) {
      if (!getNodeProperties()
          .equals(other.getNodeProperties())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PATH_FIELD_NUMBER;
    hash = (53 * hash) + getPath().hashCode();
    if (hasDigest()) {
      hash = (37 * hash) + DIGEST_FIELD_NUMBER;
      hash = (53 * hash) + getDigest().hashCode();
    }
    hash = (37 * hash) + IS_EXECUTABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIsExecutable());
    hash = (37 * hash) + CONTENTS_FIELD_NUMBER;
    hash = (53 * hash) + getContents().hashCode();
    if (hasNodeProperties()) {
      hash = (37 * hash) + NODE_PROPERTIES_FIELD_NUMBER;
      hash = (53 * hash) + getNodeProperties().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static build.bazel.remote.execution.v2.OutputFile parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.OutputFile parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(build.bazel.remote.execution.v2.OutputFile prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An `OutputFile` is similar to a
   * [FileNode][build.bazel.remote.execution.v2.FileNode], but it is used as an
   * output in an `ActionResult`. It allows a full file path rather than
   * only a name.
   * </pre>
   *
   * Protobuf type {@code build.bazel.remote.execution.v2.OutputFile}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:build.bazel.remote.execution.v2.OutputFile)
      build.bazel.remote.execution.v2.OutputFileOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputFile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              build.bazel.remote.execution.v2.OutputFile.class, build.bazel.remote.execution.v2.OutputFile.Builder.class);
    }

    // Construct using build.bazel.remote.execution.v2.OutputFile.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      path_ = "";

      if (digestBuilder_ == null) {
        digest_ = null;
      } else {
        digest_ = null;
        digestBuilder_ = null;
      }
      isExecutable_ = false;

      contents_ = com.google.protobuf.ByteString.EMPTY;

      if (nodePropertiesBuilder_ == null) {
        nodeProperties_ = null;
      } else {
        nodeProperties_ = null;
        nodePropertiesBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputFile_descriptor;
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.OutputFile getDefaultInstanceForType() {
      return build.bazel.remote.execution.v2.OutputFile.getDefaultInstance();
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.OutputFile build() {
      build.bazel.remote.execution.v2.OutputFile result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.OutputFile buildPartial() {
      build.bazel.remote.execution.v2.OutputFile result = new build.bazel.remote.execution.v2.OutputFile(this);
      result.path_ = path_;
      if (digestBuilder_ == null) {
        result.digest_ = digest_;
      } else {
        result.digest_ = digestBuilder_.build();
      }
      result.isExecutable_ = isExecutable_;
      result.contents_ = contents_;
      if (nodePropertiesBuilder_ == null) {
        result.nodeProperties_ = nodeProperties_;
      } else {
        result.nodeProperties_ = nodePropertiesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof build.bazel.remote.execution.v2.OutputFile) {
        return mergeFrom((build.bazel.remote.execution.v2.OutputFile)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(build.bazel.remote.execution.v2.OutputFile other) {
      if (other == build.bazel.remote.execution.v2.OutputFile.getDefaultInstance()) return this;
      if (!other.getPath().isEmpty()) {
        path_ = other.path_;
        onChanged();
      }
      if (other.hasDigest()) {
        mergeDigest(other.getDigest());
      }
      if (other.getIsExecutable() != false) {
        setIsExecutable(other.getIsExecutable());
      }
      if (other.getContents() != com.google.protobuf.ByteString.EMPTY) {
        setContents(other.getContents());
      }
      if (other.hasNodeProperties()) {
        mergeNodeProperties(other.getNodeProperties());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      build.bazel.remote.execution.v2.OutputFile parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (build.bazel.remote.execution.v2.OutputFile) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object path_ = "";
    /**
     * <pre>
     * The full path of the file relative to the working directory, including the
     * filename. The path separator is a forward slash `/`. Since this is a
     * relative path, it MUST NOT begin with a leading forward slash.
     * </pre>
     *
     * <code>string path = 1;</code>
     * @return The path.
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The full path of the file relative to the working directory, including the
     * filename. The path separator is a forward slash `/`. Since this is a
     * relative path, it MUST NOT begin with a leading forward slash.
     * </pre>
     *
     * <code>string path = 1;</code>
     * @return The bytes for path.
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The full path of the file relative to the working directory, including the
     * filename. The path separator is a forward slash `/`. Since this is a
     * relative path, it MUST NOT begin with a leading forward slash.
     * </pre>
     *
     * <code>string path = 1;</code>
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      path_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The full path of the file relative to the working directory, including the
     * filename. The path separator is a forward slash `/`. Since this is a
     * relative path, it MUST NOT begin with a leading forward slash.
     * </pre>
     *
     * <code>string path = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      
      path_ = getDefaultInstance().getPath();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The full path of the file relative to the working directory, including the
     * filename. The path separator is a forward slash `/`. Since this is a
     * relative path, it MUST NOT begin with a leading forward slash.
     * </pre>
     *
     * <code>string path = 1;</code>
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      path_ = value;
      onChanged();
      return this;
    }

    private build.bazel.remote.execution.v2.Digest digest_;
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> digestBuilder_;
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     * @return Whether the digest field is set.
     */
    public boolean hasDigest() {
      return digestBuilder_ != null || digest_ != null;
    }
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     * @return The digest.
     */
    public build.bazel.remote.execution.v2.Digest getDigest() {
      if (digestBuilder_ == null) {
        return digest_ == null ? build.bazel.remote.execution.v2.Digest.getDefaultInstance() : digest_;
      } else {
        return digestBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     */
    public Builder setDigest(build.bazel.remote.execution.v2.Digest value) {
      if (digestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        digest_ = value;
        onChanged();
      } else {
        digestBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     */
    public Builder setDigest(
        build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (digestBuilder_ == null) {
        digest_ = builderForValue.build();
        onChanged();
      } else {
        digestBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     */
    public Builder mergeDigest(build.bazel.remote.execution.v2.Digest value) {
      if (digestBuilder_ == null) {
        if (digest_ != null) {
          digest_ =
            build.bazel.remote.execution.v2.Digest.newBuilder(digest_).mergeFrom(value).buildPartial();
        } else {
          digest_ = value;
        }
        onChanged();
      } else {
        digestBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     */
    public Builder clearDigest() {
      if (digestBuilder_ == null) {
        digest_ = null;
        onChanged();
      } else {
        digest_ = null;
        digestBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder getDigestBuilder() {
      
      onChanged();
      return getDigestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     */
    public build.bazel.remote.execution.v2.DigestOrBuilder getDigestOrBuilder() {
      if (digestBuilder_ != null) {
        return digestBuilder_.getMessageOrBuilder();
      } else {
        return digest_ == null ?
            build.bazel.remote.execution.v2.Digest.getDefaultInstance() : digest_;
      }
    }
    /**
     * <pre>
     * The digest of the file's content.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest digest = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> 
        getDigestFieldBuilder() {
      if (digestBuilder_ == null) {
        digestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder>(
                getDigest(),
                getParentForChildren(),
                isClean());
        digest_ = null;
      }
      return digestBuilder_;
    }

    private boolean isExecutable_ ;
    /**
     * <pre>
     * True if file is executable, false otherwise.
     * </pre>
     *
     * <code>bool is_executable = 4;</code>
     * @return The isExecutable.
     */
    @java.lang.Override
    public boolean getIsExecutable() {
      return isExecutable_;
    }
    /**
     * <pre>
     * True if file is executable, false otherwise.
     * </pre>
     *
     * <code>bool is_executable = 4;</code>
     * @param value The isExecutable to set.
     * @return This builder for chaining.
     */
    public Builder setIsExecutable(boolean value) {
      
      isExecutable_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * True if file is executable, false otherwise.
     * </pre>
     *
     * <code>bool is_executable = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsExecutable() {
      
      isExecutable_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString contents_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * The contents of the file if inlining was requested. The server SHOULD NOT inline
     * file contents unless requested by the client in the
     * [GetActionResultRequest][build.bazel.remote.execution.v2.GetActionResultRequest]
     * message. The server MAY omit inlining, even if requested, and MUST do so if inlining
     * would cause the response to exceed message size limits.
     * </pre>
     *
     * <code>bytes contents = 5;</code>
     * @return The contents.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getContents() {
      return contents_;
    }
    /**
     * <pre>
     * The contents of the file if inlining was requested. The server SHOULD NOT inline
     * file contents unless requested by the client in the
     * [GetActionResultRequest][build.bazel.remote.execution.v2.GetActionResultRequest]
     * message. The server MAY omit inlining, even if requested, and MUST do so if inlining
     * would cause the response to exceed message size limits.
     * </pre>
     *
     * <code>bytes contents = 5;</code>
     * @param value The contents to set.
     * @return This builder for chaining.
     */
    public Builder setContents(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      contents_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The contents of the file if inlining was requested. The server SHOULD NOT inline
     * file contents unless requested by the client in the
     * [GetActionResultRequest][build.bazel.remote.execution.v2.GetActionResultRequest]
     * message. The server MAY omit inlining, even if requested, and MUST do so if inlining
     * would cause the response to exceed message size limits.
     * </pre>
     *
     * <code>bytes contents = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearContents() {
      
      contents_ = getDefaultInstance().getContents();
      onChanged();
      return this;
    }

    private build.bazel.remote.execution.v2.NodeProperties nodeProperties_;
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.NodeProperties, build.bazel.remote.execution.v2.NodeProperties.Builder, build.bazel.remote.execution.v2.NodePropertiesOrBuilder> nodePropertiesBuilder_;
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     * @return Whether the nodeProperties field is set.
     */
    public boolean hasNodeProperties() {
      return nodePropertiesBuilder_ != null || nodeProperties_ != null;
    }
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     * @return The nodeProperties.
     */
    public build.bazel.remote.execution.v2.NodeProperties getNodeProperties() {
      if (nodePropertiesBuilder_ == null) {
        return nodeProperties_ == null ? build.bazel.remote.execution.v2.NodeProperties.getDefaultInstance() : nodeProperties_;
      } else {
        return nodePropertiesBuilder_.getMessage();
      }
    }
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     */
    public Builder setNodeProperties(build.bazel.remote.execution.v2.NodeProperties value) {
      if (nodePropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        nodeProperties_ = value;
        onChanged();
      } else {
        nodePropertiesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     */
    public Builder setNodeProperties(
        build.bazel.remote.execution.v2.NodeProperties.Builder builderForValue) {
      if (nodePropertiesBuilder_ == null) {
        nodeProperties_ = builderForValue.build();
        onChanged();
      } else {
        nodePropertiesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     */
    public Builder mergeNodeProperties(build.bazel.remote.execution.v2.NodeProperties value) {
      if (nodePropertiesBuilder_ == null) {
        if (nodeProperties_ != null) {
          nodeProperties_ =
            build.bazel.remote.execution.v2.NodeProperties.newBuilder(nodeProperties_).mergeFrom(value).buildPartial();
        } else {
          nodeProperties_ = value;
        }
        onChanged();
      } else {
        nodePropertiesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     */
    public Builder clearNodeProperties() {
      if (nodePropertiesBuilder_ == null) {
        nodeProperties_ = null;
        onChanged();
      } else {
        nodeProperties_ = null;
        nodePropertiesBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     */
    public build.bazel.remote.execution.v2.NodeProperties.Builder getNodePropertiesBuilder() {
      
      onChanged();
      return getNodePropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     */
    public build.bazel.remote.execution.v2.NodePropertiesOrBuilder getNodePropertiesOrBuilder() {
      if (nodePropertiesBuilder_ != null) {
        return nodePropertiesBuilder_.getMessageOrBuilder();
      } else {
        return nodeProperties_ == null ?
            build.bazel.remote.execution.v2.NodeProperties.getDefaultInstance() : nodeProperties_;
      }
    }
    /**
     * <code>.build.bazel.remote.execution.v2.NodeProperties node_properties = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.NodeProperties, build.bazel.remote.execution.v2.NodeProperties.Builder, build.bazel.remote.execution.v2.NodePropertiesOrBuilder> 
        getNodePropertiesFieldBuilder() {
      if (nodePropertiesBuilder_ == null) {
        nodePropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            build.bazel.remote.execution.v2.NodeProperties, build.bazel.remote.execution.v2.NodeProperties.Builder, build.bazel.remote.execution.v2.NodePropertiesOrBuilder>(
                getNodeProperties(),
                getParentForChildren(),
                isClean());
        nodeProperties_ = null;
      }
      return nodePropertiesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:build.bazel.remote.execution.v2.OutputFile)
  }

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.OutputFile)
  private static final build.bazel.remote.execution.v2.OutputFile DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new build.bazel.remote.execution.v2.OutputFile();
  }

  public static build.bazel.remote.execution.v2.OutputFile getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<OutputFile>
      PARSER = new com.google.protobuf.AbstractParser<OutputFile>() {
    @java.lang.Override
    public OutputFile parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new OutputFile(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<OutputFile> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<OutputFile> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public build.bazel.remote.execution.v2.OutputFile getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

